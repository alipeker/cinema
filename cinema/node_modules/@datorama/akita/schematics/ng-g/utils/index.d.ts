import { dasherize, decamelize, camelize, classify, underscore, group, capitalize, featurePath, singular, plural } from './string';
export * from './parse-name';
export * from './project';
export * from './workspace';
export declare const stringUtils: {
    dasherize: typeof dasherize;
    decamelize: typeof decamelize;
    camelize: typeof camelize;
    classify: typeof classify;
    underscore: typeof underscore;
    group: typeof group;
    capitalize: typeof capitalize;
    featurePath: typeof featurePath;
    singular: typeof singular;
    plural: typeof plural;
};
export { isIvyEnabled } from './angular-utils';
export { findNodes, getSourceNodes, getDecoratorMetadata, getContentOfKeyLiteral, insertAfterLastOccurrence, insertImport, addBootstrapToModule, addDeclarationToModule, addExportToModule, addImportToModule, addProviderToModule, replaceImport, containsProperty, } from './ast-utils';
export { Host, Change, NoopChange, InsertChange, RemoveChange, ReplaceChange, createReplaceChange, createChangeRecorder, commitChanges } from './change';
export { AppConfig, getWorkspace, getWorkspacePath } from './config';
export { findModule, findModuleFromOptions, buildRelativePath, ModuleOptions } from './find-module';
export { findPropertyInAstObject } from './json-utilts';
export { getProjectPath, getProject } from './project';
export { parseName } from './parse-name';
