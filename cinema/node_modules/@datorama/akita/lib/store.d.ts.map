{"version":3,"file":"store.d.ts","sources":["store.d.ts"],"names":[],"mappingssourcesContent":["import { BehaviorSubject, Observable } from 'rxjs';\nimport { deepFreeze } from './deepFreeze';\nimport { StoreConfigOptions, UpdatableStoreConfigOptions } from './storeConfig';\nimport { StoreCache, UpdateStateCallback } from './types';\n/**\n *\n * Store for managing any type of data\n *\n * @example\n *\n * export interface SessionState {\n *   token: string;\n *   userDetails: UserDetails\n * }\n *\n * export function createInitialState(): SessionState {\n *  return {\n *    token: '',\n *    userDetails: null\n *  };\n * }\n *\n * @StoreConfig({ name: 'session' })\n * export class SessionStore extends Store<SessionState> {\n *   constructor() {\n *    super(createInitialState());\n *   }\n * }\n */\nexport declare class Store<S = any> {\n    protected options: Partial<StoreConfigOptions>;\n    private store;\n    private storeValue;\n    private inTransaction;\n    private _initialState;\n    protected cache: StoreCache;\n    constructor(initialState: Partial<S>, options?: Partial<StoreConfigOptions>);\n    /**\n     *  Set the loading state\n     *\n     *  @example\n     *\n     *  store.setLoading(true)\n     *\n     */\n    setLoading(loading?: boolean): void;\n    /**\n     *\n     * Set whether the data is cached\n     *\n     * @example\n     *\n     * store.setHasCache(true)\n     * store.setHasCache(false)\n     * store.setHasCache(true, { restartTTL: true })\n     *\n     */\n    setHasCache(hasCache: boolean, options?: {\n        restartTTL: boolean;\n    }): void;\n    /**\n     *\n     * Sometimes we need to access the store value from a store\n     *\n     * @example middleware\n     *\n     */\n    getValue(): S;\n    /**\n     *  Set the error state\n     *\n     *  @example\n     *\n     *  store.setError({text: 'unable to load data' })\n     *\n     */\n    setError<T>(error: T): void;\n    _select<R>(project: (store: S) => R): Observable<R>;\n    _value(): S;\n    _cache(): BehaviorSubject<boolean>;\n    get config(): StoreConfigOptions;\n    get storeName(): string;\n    get deepFreeze(): typeof deepFreeze;\n    get cacheConfig(): {\n        ttl: number;\n    };\n    get _producerFn(): (state: any, fn: any) => any;\n    get resettable(): boolean;\n    _setState(newState: ((state: Readonly<S>) => S) | S, _dispatchAction?: boolean): void;\n    /**\n     *\n     * Reset the current store back to the initial value\n     *\n     * @example\n     *\n     * store.reset()\n     *\n     */\n    reset(): void;\n    /**\n     *\n     * Update the store's value\n     *\n     * @example\n     *\n     * this.store.update(state => {\n     *   return {...}\n     * })\n     */\n    update(stateCallback: UpdateStateCallback<S>): any;\n    /**\n     *\n     * @example\n     *\n     *  this.store.update({ token: token })\n     */\n    update(state: Partial<S>): any;\n    updateStoreConfig(newOptions: UpdatableStoreConfigOptions): void;\n    akitaPreUpdate(_: Readonly<S>, nextState: Readonly<S>): S;\n    /**\n     *\n     * @deprecated\n     *\n     * This method will be removed in v7\n     *\n     * Akita isn't coupled to Angular and should not use Angular\n     * specific code\n     *\n     */\n    ngOnDestroy(): void;\n    /**\n     *\n     * Destroy the store\n     *\n     * @example\n     *\n     * store.destroy()\n     *\n     */\n    destroy(): void;\n    private onInit;\n    private dispatch;\n    private watchTransaction;\n    private isResettable;\n    private handleTransaction;\n    private getCacheTTL;\n}\n"]}