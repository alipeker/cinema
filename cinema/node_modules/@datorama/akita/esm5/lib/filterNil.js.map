{"version":3,"file":"filterNil.js","sourceRoot":"ng://@datorama/akita/","sources":["lib/filterNil.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,MAAM,EAAE,MAAM,gBAAgB,CAAC;AAExC;;;;;GAKG;AACH,MAAM,CAAC,IAAM,SAAS,GAAG,UAAI,MAAwC;IACnE,OAAA,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,UAAC,KAAK,IAA8B,OAAA,KAAK,KAAK,IAAI,IAAI,OAAO,KAAK,KAAK,WAAW,EAA9C,CAA8C,CAAC,CAAC;AAAvG,CAAuG,CAAC;AAE1G;;;;GAIG;AACH,MAAM,UAAU,cAAc;IAC5B,OAAO,MAAM,CAAC,UAAC,KAAQ,IAA8B,OAAA,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,EAArC,CAAqC,CAAC,CAAC;AAC9F,CAAC","sourcesContent":["import { Observable, of, OperatorFunction } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n/**\n * @example\n *\n * query.selectEntity(2).pipe(filterNil)\n * @deprecated Use the operator function filterNilValue()\n */\nexport const filterNil = <T>(source: Observable<T | undefined | null>): Observable<NonNullable<T>> =>\n  source.pipe(filter((value): value is NonNullable<T> => value !== null && typeof value !== 'undefined'));\n\n/**\n * @example\n *\n * query.selectEntity(2).pipe(filterNilValue())\n */\nexport function filterNilValue<T>(): OperatorFunction<T, NonNullable<T>> {\n  return filter((value: T): value is NonNullable<T> => value !== null && value !== undefined);\n}\n"]}