{"version":3,"file":"arrayToggle.js","sourceRoot":"ng://@datorama/akita/","sources":["lib/arrayToggle.ts"],"names":[],"mappings":";AAAA;;;GAGG;AACH,MAAM,UAAU,KAAK,CAAI,IAAa;IACpC,OAAO,UAAC,CAAI,EAAE,CAAI,IAAK,OAAA,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,EAAnB,CAAmB,CAAC;AAC7C,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,IAAI;IAClB,OAAO,KAAK,CAAI,IAAI,CAAC,CAAC;AACxB,CAAC;AAED;;;;;;;GAOG;AACH,MAAM,UAAU,WAAW,CAAI,KAAU,EAAE,QAAW,EAAE,OAAoD;IAApD,wBAAA,EAAA,oBAAoC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,KAAK,CAAC,EAAP,CAAO;IAC1G,IAAM,KAAK,GAAG,KAAK,CAAC,SAAS,CAAC,UAAC,QAAQ,IAAK,OAAA,OAAO,CAAC,QAAQ,EAAE,QAAQ,CAAC,EAA3B,CAA2B,CAAC,CAAC;IACzE,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,UAAK,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,EAAK,KAAK,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,EAAE,CAAC,UAAK,KAAK,GAAE,QAAQ,EAAC,CAAC;AACjG,CAAC","sourcesContent":["/**\n * Create an array value comparator for a specific key of the value.\n * @param prop The property of the value to be compared.\n */\nexport function byKey<T>(prop: keyof T) {\n  return (a: T, b: T) => a[prop] === b[prop];\n}\n\n/**\n * Create an array value comparator for the id field of an array value.\n */\nexport function byId<T extends Record<'id', any>>() {\n  return byKey<T>('id');\n}\n\n/**\n * Adds or removes a value from an array by comparing its values. If a matching value exists it is removed, otherwise\n * it is added to the array.\n *\n * @param array The array to modify.\n * @param newValue The new value to toggle.\n * @param compare A compare function to determine equality of array values. Default is an equality test by object identity.\n */\nexport function arrayToggle<T>(array: T[], newValue: T, compare: (a: T, b: T) => boolean = (a, b) => a === b) {\n  const index = array.findIndex((oldValue) => compare(newValue, oldValue));\n  return !!~index ? [...array.slice(0, index), ...array.slice(index + 1)] : [...array, newValue];\n}\n"]}