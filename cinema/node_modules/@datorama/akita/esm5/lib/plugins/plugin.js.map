{"version":3,"file":"plugin.js","sourceRoot":"ng://@datorama/akita/","sources":["lib/plugins/plugin.ts"],"names":[],"mappings":"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","sourcesContent":["import { EntityStore } from '../entityStore';\nimport { QueryEntity } from '../queryEntity';\nimport { Query } from '../query';\nimport { filterNilValue } from '../filterNil';\nimport { toBoolean } from '../toBoolean';\nimport { getAkitaConfig } from '../config';\nimport { getValue } from '../getValueByString';\nimport { setValue } from '../setValueByString';\n\nexport type Queries<State> = Query<State> | QueryEntity<State>;\n\nexport abstract class AkitaPlugin<State = any> {\n  protected constructor(protected query: Queries<State>, config?: { resetFn?: Function }) {\n    if (config && config.resetFn) {\n      if (getAkitaConfig().resettable) {\n        this.onReset(config.resetFn);\n      }\n    }\n  }\n\n  /** This method is responsible for getting access to the query. */\n  protected getQuery() {\n    return this.query;\n  }\n\n  /** This method is responsible for getting access to the store. */\n  protected getStore() {\n    return this.getQuery().__store__;\n  }\n\n  /** This method is responsible for cleaning. */\n  public abstract destroy();\n\n  /** This method is responsible tells whether the plugin is entityBased or not.  */\n  protected isEntityBased(entityId: any) {\n    return toBoolean(entityId);\n  }\n\n  /** This method is responsible for selecting the source; it can be the whole store or one entity. */\n  protected selectSource(entityId: any, property?: string) {\n    if (this.isEntityBased(entityId)) {\n      return (this.getQuery() as QueryEntity<State>).selectEntity(entityId).pipe(filterNilValue());\n    }\n\n    if (property) {\n      return this.getQuery().select((state) => getValue(state, this.withStoreName(property)));\n    }\n\n    return this.getQuery().select();\n  }\n\n  protected getSource(entityId: any, property?: string): any {\n    if (this.isEntityBased(entityId)) {\n      return (this.getQuery() as QueryEntity<State>).getEntity(entityId);\n    }\n\n    const state = this.getQuery().getValue();\n\n    if (property) {\n      return getValue(state, this.withStoreName(property));\n    }\n\n    return state;\n  }\n\n  protected withStoreName(prop: string) {\n    return `${this.storeName}.${prop}`;\n  }\n\n  protected get storeName() {\n    return this.getStore().storeName;\n  }\n\n  /** This method is responsible for updating the store or one entity; it can be the whole store or one entity. */\n  protected updateStore(newState, entityId?, property?: string, replace = false) {\n    if (this.isEntityBased(entityId)) {\n      const store = this.getStore() as EntityStore;\n\n      replace ? store.replace(entityId, newState) : store.update(entityId, newState);\n    } else {\n      if (property) {\n        this.getStore()._setState((state) => {\n          return setValue(state, this.withStoreName(property), newState, true);\n        });\n\n        return;\n      }\n\n      const nextState = replace ? newState : (state) => ({ ...state, ...newState });\n\n      this.getStore()._setState(nextState);\n    }\n  }\n\n  /**\n   * Function to invoke upon reset\n   */\n  private onReset(fn: Function) {\n    const original = this.getStore().reset;\n    this.getStore().reset = (...params) => {\n      /** It should run after the plugin destroy method */\n      setTimeout(() => {\n        original.apply(this.getStore(), params);\n        fn();\n      });\n    };\n  }\n}\n"]}