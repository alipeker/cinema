{"version":3,"file":"entityStateHistoryPlugin.js","sourceRoot":"ng://@datorama/akita/","sources":["lib/plugins/stateHistory/entityStateHistoryPlugin.ts"],"names":[],"mappings":"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","sourcesContent":["import { EntityState, OrArray, getIDType } from '../../types';\nimport { QueryEntity } from '../../queryEntity';\nimport { StateHistoryParams, StateHistoryPlugin } from './stateHistoryPlugin';\nimport { toBoolean } from '../../toBoolean';\nimport { skip } from 'rxjs/operators';\nimport { EntityCollectionPlugin } from '../entityCollectionPlugin';\n\nexport interface StateHistoryEntityParams<IDType> extends StateHistoryParams {\n  entityIds?: OrArray<IDType>;\n}\n\nexport class EntityStateHistoryPlugin<State extends EntityState = any, P extends StateHistoryPlugin<State> = StateHistoryPlugin<State>> extends EntityCollectionPlugin<State, P> {\n  constructor(protected query: QueryEntity<State>, protected readonly params: StateHistoryEntityParams<getIDType<State>> = {}) {\n    super(query, params.entityIds);\n    params.maxAge = toBoolean(params.maxAge) ? params.maxAge : 10;\n    this.activate();\n    this.selectIds()\n      .pipe(skip(1))\n      .subscribe(ids => this.activate(ids));\n  }\n\n  redo(ids?: OrArray<getIDType<State>>) {\n    this.forEachId(ids, e => e.redo());\n  }\n\n  undo(ids?: OrArray<getIDType<State>>) {\n    this.forEachId(ids, e => e.undo());\n  }\n\n  hasPast(id: getIDType<State>) {\n    if (this.hasEntity(id)) {\n      return this.getEntity(id).hasPast;\n    }\n  }\n\n  hasFuture(id: getIDType<State>) {\n    if (this.hasEntity(id)) {\n      return this.getEntity(id).hasFuture;\n    }\n  }\n\n  jumpToFuture(ids: OrArray<getIDType<State>>, index: number) {\n    this.forEachId(ids, e => e.jumpToFuture(index));\n  }\n\n  jumpToPast(ids: OrArray<getIDType<State>>, index: number) {\n    this.forEachId(ids, e => e.jumpToPast(index));\n  }\n\n  clear(ids?: OrArray<getIDType<State>>) {\n    this.forEachId(ids, e => e.clear());\n  }\n\n  destroy(ids?: OrArray<getIDType<State>>, clearHistory = false) {\n    this.forEachId(ids, e => e.destroy(clearHistory));\n  }\n\n  ignoreNext(ids?: OrArray<getIDType<State>>) {\n    this.forEachId(ids, e => e.ignoreNext());\n  }\n\n  protected instantiatePlugin(id: getIDType<State>) {\n    return new StateHistoryPlugin<State>(this.query, this.params, id) as P;\n  }\n}\n"]}