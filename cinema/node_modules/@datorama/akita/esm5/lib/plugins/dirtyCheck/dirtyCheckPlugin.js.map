{"version":3,"file":"dirtyCheckPlugin.js","sourceRoot":"ng://@datorama/akita/","sources":["lib/plugins/dirtyCheck/dirtyCheckPlugin.ts"],"names":[],"mappings":"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","sourcesContent":["import { AkitaPlugin, Queries } from '../plugin';\nimport { QueryEntity } from '../../queryEntity';\nimport { BehaviorSubject, combineLatest, Observable, Subject, Subscription } from 'rxjs';\nimport { distinctUntilChanged, map, skip } from 'rxjs/operators';\nimport { isUndefined } from '../../isUndefined';\nimport { Query } from '../../query';\nimport { coerceArray } from '../../coerceArray';\nimport { isFunction } from '../../isFunction';\nimport { logAction } from '../../actions';\n\ntype Head<State = any> = State | Partial<State>;\n\nexport type DirtyCheckComparator<State> = (head: State, current: State) => boolean;\n\nexport type DirtyCheckParams<StoreState = any> = {\n  comparator?: DirtyCheckComparator<StoreState>;\n  watchProperty?: keyof StoreState | (keyof StoreState)[];\n};\n\nexport const dirtyCheckDefaultParams = {\n  comparator: (head, current) => JSON.stringify(head) !== JSON.stringify(current),\n};\n\nexport function getNestedPath(nestedObj, path: string) {\n  const pathAsArray: string[] = path.split('.');\n  return pathAsArray.reduce((obj, key) => (obj && obj[key] !== 'undefined' ? obj[key] : undefined), nestedObj);\n}\n\nexport type DirtyCheckResetParams<StoreState = any> = {\n  updateFn?: StoreState | ((head: StoreState, current: StoreState) => any);\n};\n\nexport class DirtyCheckPlugin<State = any> extends AkitaPlugin<State> {\n  private head: Head<State>;\n  private dirty = new BehaviorSubject(false);\n  private subscription: Subscription;\n  private active = false;\n  private _reset = new Subject();\n\n  isDirty$: Observable<boolean> = this.dirty.asObservable().pipe(distinctUntilChanged());\n  reset$ = this._reset.asObservable();\n\n  constructor(protected query: Queries<State>, private params?: DirtyCheckParams<State>, private _entityId?: any) {\n    super(query);\n    this.params = { ...dirtyCheckDefaultParams, ...params };\n    if (this.params.watchProperty) {\n      const watchProp = coerceArray(this.params.watchProperty) as any[];\n      if (query instanceof QueryEntity && watchProp.includes('entities') && !watchProp.includes('ids')) {\n        watchProp.push('ids');\n      }\n      this.params.watchProperty = watchProp;\n    }\n  }\n\n  reset(params: DirtyCheckResetParams = {}): void {\n    let currentValue = this.head;\n    if (isFunction(params.updateFn)) {\n      if (this.isEntityBased(this._entityId)) {\n        currentValue = params.updateFn(this.head, (this.getQuery() as QueryEntity<State>).getEntity(this._entityId));\n      } else {\n        currentValue = params.updateFn(this.head, (this.getQuery() as Query<State>).getValue());\n      }\n    }\n    logAction(`@DirtyCheck - Revert`);\n    this.updateStore(currentValue, this._entityId);\n    this._reset.next();\n  }\n\n  setHead(): DirtyCheckPlugin<State> {\n    if (!this.active) {\n      this.activate();\n      this.active = true;\n    } else {\n      this.head = this._getHead();\n    }\n    this.updateDirtiness(false);\n    return this;\n  }\n\n  isDirty(): boolean {\n    return !!this.dirty.value;\n  }\n\n  hasHead(): boolean {\n    return !!this.getHead();\n  }\n\n  destroy(): void {\n    this.head = null;\n    this.subscription && this.subscription.unsubscribe();\n    this._reset && this._reset.complete();\n  }\n\n  isPathDirty(path: string): boolean {\n    const head = this.getHead();\n    const current = (this.getQuery() as Query<State>).getValue();\n    const currentPathValue = getNestedPath(current, path);\n    const headPathValue = getNestedPath(head, path);\n\n    return this.params.comparator(currentPathValue, headPathValue);\n  }\n\n  getHead(): Partial<State> | State | undefined | null {\n    return this.head;\n  }\n\n  private activate() {\n    this.head = this._getHead();\n    /** if we are tracking specific properties select only the relevant ones */\n    const source = this.params.watchProperty\n      ? (this.params.watchProperty as (keyof State)[]).map((prop) =>\n          this.query\n            .select((state) => state[prop])\n            .pipe(\n              map((val) => ({\n                val,\n                __akitaKey: prop,\n              }))\n            )\n        )\n      : [this.selectSource(this._entityId)];\n    this.subscription = combineLatest(...source)\n      .pipe(skip(1))\n      .subscribe((currentState: any[]) => {\n        if (isUndefined(this.head)) return;\n        /** __akitaKey is used to determine if we are tracking a specific property or a store change */\n        const isChange = currentState.some((state) => {\n          const head = state.__akitaKey ? this.head[state.__akitaKey as any] : this.head;\n          const compareTo = state.__akitaKey ? state.val : state;\n\n          return this.params.comparator(head, compareTo);\n        });\n\n        this.updateDirtiness(isChange);\n      });\n  }\n\n  private updateDirtiness(isDirty: boolean) {\n    this.dirty.next(isDirty);\n  }\n\n  private _getHead(): Head<State> {\n    let head: Head<State> = this.getSource(this._entityId);\n    if (this.params.watchProperty) {\n      head = this.getWatchedValues(head as State);\n    }\n    return head;\n  }\n\n  private getWatchedValues(source: State): Partial<State> {\n    return (this.params.watchProperty as (keyof State)[]).reduce((watched, prop) => {\n      watched[prop] = source[prop];\n      return watched;\n    }, {} as Partial<State>);\n  }\n}\n"]}