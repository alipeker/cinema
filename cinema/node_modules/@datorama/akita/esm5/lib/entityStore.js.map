{"version":3,"file":"entityStore.js","sourceRoot":"ng://@datorama/akita/","sources":["lib/entityStore.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,MAAM,CAAC;AAC/B,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,MAAM,WAAW,CAAC;AACjD,OAAO,EAAE,WAAW,EAAsB,MAAM,eAAe,CAAC;AAChE,OAAO,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAC5C,OAAO,EAAE,cAAc,EAAE,MAAM,gBAAgB,CAAC;AAChD,OAAO,EAAgB,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAC9D,OAAO,EAAE,KAAK,EAAE,MAAM,OAAO,CAAC;AAC9B,OAAO,EAAE,iBAAiB,EAAoB,MAAM,qBAAqB,CAAC;AAC1E,OAAO,EAAE,uBAAuB,EAAE,MAAM,2BAA2B,CAAC;AACpE,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AACxC,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AACxC,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAC;AACpC,OAAO,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AAC1C,OAAO,EAAE,KAAK,EAAE,MAAM,SAAS,CAAC;AAChC,OAAO,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAC5C,OAAO,EAAE,cAAc,EAAE,MAAM,kBAAkB,CAAC;AAClD,OAAO,EAAe,WAAW,EAAE,MAAM,eAAe,CAAC;AACzD,OAAO,EAAE,KAAK,EAAE,MAAM,SAAS,CAAC;AAEhC,OAAO,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAe5C,OAAO,EAAE,cAAc,EAAE,MAAM,kBAAkB,CAAC;AAElD;;;;;;;;;;;;;;;;GAgBG;AACH;IAAoH,+BAAQ;IAK1H,qBAAY,YAA6B,EAAY,OAAyC;QAAlF,6BAAA,EAAA,iBAA6B;QAAY,wBAAA,EAAA,YAAyC;QAA9F,YACE,wCAAW,uBAAuB,EAAE,GAAK,YAAY,GAAI,OAAO,CAAC,SAClE;QAFoD,aAAO,GAAP,OAAO,CAAkC;QAHtF,mBAAa,GAAG,IAAI,OAAO,EAAwB,CAAC;QACpD,qBAAe,GAAG,IAAI,OAAO,EAAsD,CAAC;;IAI5F,CAAC;IAGD,sBAAI,4CAAmB;QADvB,YAAY;aACZ;YACE,OAAO,IAAI,CAAC,aAAa,CAAC,YAAY,EAAE,CAAC;QAC3C,CAAC;;;OAAA;IAGD,sBAAI,+CAAsB;QAD1B,YAAY;aACZ;YACE,OAAO,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE,CAAC;QAC7C,CAAC;;;OAAA;IAGD,sBAAI,8BAAK;QADT,YAAY;aACZ;YACE,OAAQ,IAAI,CAAC,MAA6B,CAAC,KAAK,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,IAAI,cAAc,CAAC;QAC3F,CAAC;;;OAAA;IAED;;;;;;;;;;OAUG;IACH,yBAAG,GAAH,UAAI,QAAiC,EAAE,OAA0C;QAAjF,iBA6BC;QA7BsC,wBAAA,EAAA,YAA0C;QAC/E,IAAI,KAAK,CAAC,QAAQ,CAAC;YAAE,OAAO;QAE5B,KAAK,EAAE,IAAI,SAAS,CAAC,YAAY,CAAC,CAAC;QAEnC,IAAM,cAAc,GAAG,IAAI,CAAC,iBAAiB,KAAK,WAAW,CAAC,SAAS,CAAC,iBAAiB,CAAC;QAC1F,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;QAE7C,IAAI,CAAC,SAAS,CAAC,UAAC,KAAK;YACnB,IAAM,QAAQ,GAAG,WAAW,CAAC;gBAC3B,KAAK,OAAA;gBACL,QAAQ,UAAA;gBACR,KAAK,EAAE,KAAI,CAAC,KAAK;gBACjB,YAAY,EAAE,KAAI,CAAC,iBAAiB;gBACpC,cAAc,gBAAA;aACf,CAAC,CAAC;YAEH,IAAI,WAAW,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,KAAK,EAAE;gBAC1C,QAAgB,CAAC,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC;aAC7C;YAED,OAAO,QAAQ,CAAC;QAClB,CAAC,CAAC,CAAC;QAEH,IAAI,IAAI,CAAC,iBAAiB,EAAE,EAAE;YAC5B,IAAI,CAAC,gBAAgB,EAAE,CAAC;SACzB;QAED,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,aAAa,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;IACtE,CAAC;IAED;;;;;;;;;;OAUG;IACH,yBAAG,GAAH,UAAI,QAA6B,EAAE,OAAgD;QAAhD,wBAAA,EAAA,YAAgC,OAAO,EAAE,KAAK,EAAE;QACjF,IAAM,UAAU,GAAG,WAAW,CAAC,QAAQ,CAAC,CAAC;QAEzC,IAAI,OAAO,CAAC,UAAU,CAAC;YAAE,OAAO;QAEhC,IAAM,IAAI,GAAG,WAAW,CAAC;YACvB,KAAK,EAAE,IAAI,CAAC,MAAM,EAAE;YACpB,YAAY,EAAE,IAAI,CAAC,iBAAiB;YACpC,QAAQ,EAAE,UAAU;YACpB,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,OAAO,SAAA;SACR,CAAC,CAAC;QAEH,IAAI,IAAI,EAAE;YACR,KAAK,EAAE,IAAI,SAAS,CAAC,YAAY,CAAC,CAAC;YACnC,IAAI,CAAC,QAAQ,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;YAExC,IAAI,CAAC,SAAS,CAAC,cAAM,OAAA,IAAI,CAAC,QAAQ,EAAb,CAAa,CAAC,CAAC;YAEpC,IAAI,IAAI,CAAC,iBAAiB,EAAE,EAAE;gBAC5B,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;aAC7B;YAED,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,aAAa,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;SACxE;IACH,CAAC;IA4BD,4BAAM,GAAN,UACE,cAAgH,EAChH,YAAiF;QAFnF,iBAiDC;QA7CC,IAAI,WAAW,CAAC,YAAY,CAAC,EAAE;YAC7B,iBAAM,MAAM,YAAC,cAA4B,CAAC,CAAC;YAC3C,OAAO;SACR;QACD,IAAI,GAAG,GAAa,EAAE,CAAC;QAEvB,IAAI,UAAU,CAAC,cAAc,CAAC,EAAE;YAC9B,qDAAqD;YACrD,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,UAAC,EAAE,IAAK,OAAC,cAAoD,CAAC,KAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,EAAxE,CAAwE,CAAC,CAAC;SACzG;aAAM;YACL,kCAAkC;YAClC,GAAG,GAAG,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,WAAW,CAAC,cAAiC,CAAC,CAAC;SACzF;QAED,IAAI,OAAO,CAAC,GAAG,CAAC;YAAE,OAAO;QAEzB,KAAK,EAAE,IAAI,SAAS,CAAC,eAAe,EAAE,GAAG,CAAC,CAAC;QAE3C,IAAI,eAKC,CAAC;QAEN,IAAI,CAAC,SAAS,CAAC,UAAC,KAAK;YACnB,OAAA,cAAc,CAAC;gBACb,KAAK,EAAE,KAAI,CAAC,KAAK;gBACjB,GAAG,KAAA;gBACH,eAAe,EAAE,KAAI,CAAC,oBAAoB;gBAC1C,KAAK,OAAA;gBACL,YAAY,cAAA;gBACZ,UAAU,EAAE,KAAI,CAAC,WAAW;gBAC5B,iBAAiB,EAAE,UAAC,KAAa,EAAE,KAAa;oBAC9C,eAAe,GAAG,EAAE,KAAK,OAAA,EAAE,KAAK,OAAA,EAAE,CAAC;oBACnC,KAAI,CAAC,eAAe,CAAC,IAAI,uBAAM,eAAe,KAAE,OAAO,EAAE,IAAI,IAAG,CAAC;gBACnE,CAAC;aACF,CAAC;QAXF,CAWE,CACH,CAAC;QAEF,IAAI,eAAe,EAAE;YACnB,IAAI,CAAC,eAAe,CAAC,IAAI,uBAAM,eAAe,KAAE,OAAO,EAAE,KAAK,IAAG,CAAC;SACnE;QAED,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,aAAa,CAAC,MAAM,EAAE,GAAG,KAAA,EAAE,CAAC,CAAC;IAC/D,CAAC;IAkCD,4BAAM,GAAN,UACE,GAAoB,EACpB,QAAwE,EACxE,QAA+F,EAC/F,OAAyC;QAL3C,iBA2BC;QAtBC,wBAAA,EAAA,YAAyC;QAEzC,IAAM,OAAO,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC;QACjC,IAAM,SAAS,GAAG,UAAC,QAAQ,IAAK,OAAA,UAAC,EAAE,IAAK,OAAA,SAAS,CAAC,KAAI,CAAC,QAAQ,EAAE,EAAE,CAAC,KAAK,QAAQ,EAAzC,CAAyC,EAAjD,CAAiD,CAAC;QAClF,IAAM,SAAS,GAAG,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC;QACvG,IAAM,YAAY,GAAG,UAAU,CAAC,SAAS,CAAC,CAAC;QAE3C,IAAM,SAAS,GAAG,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;QAClD,IAAM,WAAW,GAAG,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,UAAC,EAAE;;YAC1D,IAAM,WAAW,GAAG,OAAO,QAAQ,KAAK,UAAU,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC;YAC7E,IAAM,MAAM,GAAG,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC;YAC9E,IAAM,MAAM,yBAAQ,MAAM,gBAAG,KAAI,CAAC,KAAK,IAAG,EAAE,MAAE,CAAC;YAC/C,IAAI,YAAY,EAAE;gBAChB,OAAO,IAAI,SAAS,CAAC,MAAM,CAAC,CAAC;aAC9B;YACD,OAAO,MAAM,CAAC;QAChB,CAAC,CAAC,CAAC;QAEH,mCAAmC;QACnC,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,QAA0D,CAAC,CAAC;QACnF,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QACtB,KAAK,EAAE,IAAI,SAAS,CAAC,eAAe,CAAC,CAAC;IACxC,CAAC;IAED;;;;;;;;;;;OAWG;IACH,gCAAU,GAAV,UAAW,QAAsB,EAAE,OAA4D;;QAA5D,wBAAA,EAAA,YAA4D;QAC7F,IAAM,QAAQ,GAAG,EAAE,CAAC;QACpB,IAAM,UAAU,GAAG,EAAE,CAAC;QACtB,IAAM,eAAe,GAAG,EAAE,CAAC;;YAE3B,oDAAoD;YACpD,KAAqB,IAAA,aAAA,SAAA,QAAQ,CAAA,kCAAA,wDAAE;gBAA1B,IAAM,MAAM,qBAAA;gBACf,IAAM,gBAAgB,GAAG,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;gBAC1D,IAAM,EAAE,GAAG,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBACxC,IAAI,SAAS,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,CAAC,EAAE;oBAChC,IAAM,IAAI,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;oBACxC,IAAM,MAAM,yBAAQ,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,GAAK,gBAAgB,CAAE,CAAC;oBACtE,IAAM,IAAI,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;oBACxE,IAAM,QAAQ,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;oBACvD,IAAM,MAAM,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;oBACpC,eAAe,CAAC,MAAM,CAAC,GAAG,QAAQ,CAAC;oBACnC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;iBACzB;qBAAM;oBACL,IAAM,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,gBAAgB,CAAC;oBACjG,IAAM,QAAQ,GAAG,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;oBACnD,IAAM,MAAM,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;oBACpC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;oBACtB,eAAe,CAAC,MAAM,CAAC,GAAG,QAAQ,CAAC;iBACpC;aACF;;;;;;;;;QAED,KAAK,EAAE,IAAI,SAAS,CAAC,aAAa,CAAC,CAAC;QAEpC,IAAI,CAAC,SAAS,CAAC,UAAC,KAAK,IAAK,OAAA,uBACrB,KAAK,KACR,GAAG,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC,UAAK,KAAK,CAAC,GAAG,EAAK,QAAQ,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,EAC9D,QAAQ,wBACH,KAAK,CAAC,QAAQ,GACd,eAAe,GAEpB,OAAO,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,IAC1B,EARwB,CAQxB,CAAC,CAAC;QAEJ,UAAU,CAAC,MAAM,IAAI,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,aAAa,CAAC,MAAM,EAAE,GAAG,EAAE,UAAU,EAAE,CAAC,CAAC;QAC9F,QAAQ,CAAC,MAAM,IAAI,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,aAAa,CAAC,GAAG,EAAE,GAAG,EAAE,QAAQ,EAAE,CAAC,CAAC;QACvF,IAAI,QAAQ,CAAC,MAAM,IAAI,IAAI,CAAC,UAAU,EAAE,EAAE;YACxC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;SAC7B;IACH,CAAC;IAED;;;;;;;;;OASG;IACH,6BAAO,GAAP,UAAQ,GAAQ,EAAE,QAA6B;;QAC7C,IAAM,OAAO,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC;QACjC,IAAI,OAAO,CAAC,OAAO,CAAC;YAAE,OAAO;QAC7B,IAAM,QAAQ,GAAG,EAAE,CAAC;;YACpB,KAAiB,IAAA,YAAA,SAAA,OAAO,CAAA,gCAAA,qDAAE;gBAArB,IAAM,EAAE,oBAAA;gBACX,QAAQ,CAAC,EAAE,CAAC,yBAAQ,QAAQ,gBAAG,IAAI,CAAC,KAAK,IAAG,EAAE,MAAE,CAAC;aAClD;;;;;;;;;QACD,KAAK,EAAE,IAAI,SAAS,CAAC,gBAAgB,EAAE,GAAG,CAAC,CAAC;QAC5C,IAAI,CAAC,SAAS,CAAC,UAAC,KAAK,IAAK,OAAA,uBACrB,KAAK,KACR,QAAQ,wBACH,KAAK,CAAC,QAAQ,GACd,QAAQ,KAEb,EANwB,CAMxB,CAAC,CAAC;IACN,CAAC;IAED;;;;;;;;OAQG;IACH,0BAAI,GAAJ,UAAK,IAAY,EAAE,EAAU;QAC3B,IAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC;QAC7B,GAAG,CAAC,MAAM,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAErE,KAAK,EAAE,IAAI,SAAS,CAAC,aAAa,CAAC,CAAC;QACpC,IAAI,CAAC,SAAS,CAAC,UAAC,KAAK,IAAK,OAAA,uBACrB,KAAK;YACR,uDAAuD;YACvD,QAAQ,eACH,KAAK,CAAC,QAAQ,GAEnB,GAAG,KAAA,IACH,EAPwB,CAOxB,CAAC,CAAC;IACN,CAAC;IAiBD,4BAAM,GAAN,UAAO,OAAuE;QAA9E,iBAyBC;QAxBC,IAAI,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC;YAAE,OAAO;QAE9B,IAAM,QAAQ,GAAG,SAAS,CAAC,OAAO,CAAC,CAAC;QAEpC,wBAAwB;QACxB,IAAI,GAAG,GAAoB,EAAE,CAAC;QAE9B,IAAI,UAAU,CAAC,OAAO,CAAC,EAAE;YACvB,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,UAAC,QAAQ,IAAK,OAAA,OAAO,CAAC,KAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,EAAhC,CAAgC,CAAC,CAAC;SACvE;aAAM;YACL,GAAG,GAAG,QAAQ,CAAC,CAAC,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;SAClD;QAED,IAAI,OAAO,CAAC,GAAG,CAAC;YAAE,OAAO;QAEzB,KAAK,EAAE,IAAI,SAAS,CAAC,eAAe,EAAE,GAAG,CAAC,CAAC;QAC3C,IAAI,CAAC,SAAS,CAAC,UAAC,KAAyB,IAAK,OAAA,cAAc,CAAC,EAAE,KAAK,OAAA,EAAE,GAAG,KAAA,EAAE,CAAC,EAA9B,CAA8B,CAAC,CAAC;QAE9E,IAAI,CAAC,QAAQ,EAAE;YACb,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;SACzB;QAED,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;QACzB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,aAAa,CAAC,MAAM,EAAE,GAAG,KAAA,EAAE,CAAC,CAAC;IAC/D,CAAC;IAED;;;;;;;;;;;;;;;OAeG;IACH,kCAAY,GAAZ,UAAa,kBAAyE;QACpF,IAAM,GAAG,GAAG,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACrC,KAAK,EAAE,IAAI,SAAS,CAAC,eAAe,EAAE,GAAG,CAAC,CAAC;QAC3C,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,kBAAyC,CAAC,CAAC;IAC9D,CAAC;IAWD,+BAAS,GAAT,UAAU,WAA6C;QACrD,IAAM,MAAM,GAAG,iBAAiB,CAAC,WAAW,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QAErE,IAAI,MAAM,KAAK,SAAS,EAAE;YACxB,OAAO;SACR;QAED,KAAK,EAAE,IAAI,SAAS,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;QAC3C,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;IAC1B,CAAC;IAED;;;;;;;OAOG;IACH,+BAAS,GAAT,UAA+B,GAAM;QAArC,iBAeC;QAdC,IAAM,OAAO,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC;QACjC,IAAI,OAAO,CAAC,OAAO,CAAC;YAAE,OAAO;QAC7B,IAAM,UAAU,GAAG,OAAO,CAAC,KAAK,CAAC,UAAC,EAAE,IAAK,OAAA,KAAI,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAA5B,CAA4B,CAAC,CAAC;QACvE,IAAI,UAAU;YAAE,OAAO;QAEvB,KAAK,EAAE,IAAI,SAAS,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC;QACxC,IAAI,CAAC,SAAS,CAAC,UAAC,KAAK;YACnB,oEAAoE;YACpE,IAAM,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,UAAM,KAAK,CAAC,MAAmB,EAAK,OAAO,EAAE,CAAC,CAAC;YACjF,6BACK,KAAK,KACR,MAAM,EAAE,OAAO,IACf;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;;;;OAOG;IACH,kCAAY,GAAZ,UAAkC,GAAM;QAAxC,iBAaC;QAZC,IAAM,OAAO,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC;QACjC,IAAI,OAAO,CAAC,OAAO,CAAC;YAAE,OAAO;QAC7B,IAAM,SAAS,GAAG,OAAO,CAAC,IAAI,CAAC,UAAC,EAAE,IAAK,OAAA,KAAI,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAA5B,CAA4B,CAAC,CAAC;QACrE,IAAI,CAAC,SAAS;YAAE,OAAO;QAEvB,KAAK,EAAE,IAAI,SAAS,CAAC,eAAe,EAAE,GAAG,CAAC,CAAC;QAC3C,IAAI,CAAC,SAAS,CAAC,UAAC,KAAK;YACnB,6BACK,KAAK,KACR,MAAM,EAAE,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,UAAC,SAAS,IAAK,OAAA,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,EAAjC,CAAiC,CAAC,CAAC,CAAC,CAAC,IAAI,IAClH;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;;;;OAOG;IAEH,kCAAY,GAAZ,UAAkC,GAAM;QADxC,iBASC;QAPC,IAAM,OAAO,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC;QACjC,IAAM,YAAY,GAAG,UAAC,MAAM,IAAK,OAAA,UAAC,EAAE,IAAK,OAAA,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,KAAK,MAAM,EAAnC,CAAmC,EAA3C,CAA2C,CAAC;QAC7E,IAAM,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;QAClD,IAAM,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;QAChD,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;QAC1B,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;QACpB,KAAK,EAAE,IAAI,SAAS,CAAC,eAAe,CAAC,CAAC;IACxC,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;OAsBG;IACH,mCAAa,GAAb,UAAc,YAAiB,EAAE,WAA6C;QAAhE,6BAAA,EAAA,iBAAiB;QAAE,4BAAA,EAAA,gBAA6C;QAC5E,IAAM,QAAQ,GAAgC,EAAE,IAAI,EAAE,QAAM,IAAI,CAAC,SAAW,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC;QAClG,IAAI,CAAC,EAAE,GAAG,IAAI,aAAa,CAAC,YAAY,wBAAO,QAAQ,GAAK,WAAW,EAAG,CAAC;QAC3E,OAAO,IAAI,CAAC,EAAE,CAAC;IACjB,CAAC;IAED,YAAY;IACZ,6BAAO,GAAP;QACE,iBAAM,OAAO,WAAE,CAAC;QAChB,IAAI,IAAI,CAAC,EAAE,YAAY,WAAW,EAAE;YAClC,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC;SACnB;QACD,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC;IAChC,CAAC;IAED,YAAY;IACZ,0CAAoB,GAApB,UAAqB,CAAuB,EAAE,UAAe;QAC3D,OAAO,UAAwB,CAAC;IAClC,CAAC;IAED,YAAY;IACZ,uCAAiB,GAAjB,UAAkB,SAAc;QAC9B,OAAO,SAAuB,CAAC;IACjC,CAAC;IAED,YAAY;IACZ,yCAAmB,GAAnB,UAAoB,SAA+B;QACjD,OAAO,SAAS,CAAC;IACnB,CAAC;IAED,sBAAY,4BAAG;aAAf;YACE,OAAO,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC;QAC3B,CAAC;;;OAAA;IAED,sBAAY,iCAAQ;aAApB;YACE,OAAO,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC;QAChC,CAAC;;;OAAA;IAED,sBAAY,+BAAM;aAAlB;YACE,OAAO,IAAI,CAAC,MAAM,EAAE,CAAC,MAAM,CAAC;QAC9B,CAAC;;;OAAA;IAEO,gCAAU,GAAlB,UAAmB,GAAoB;QACrC,IAAI,CAAC,SAAS,CAAC,UAAC,KAAK;YACnB,6BACK,KAAK,KACR,MAAM,EAAE,GAAG,IACX;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,sCAAgB,GAAxB,UAAyB,GAAW;QAApC,iBAoBC;QApBwB,oBAAA,EAAA,WAAW;QAClC,IAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;QACrB,IAAM,MAAM,GAAG,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC,oBAAoB,CAAC,CAAC;QACxD,IAAI,UAAU,CAAC;QACf,IAAM,QAAQ,GAAG,UAAC,EAAE;;YAClB,IAAM,OAAO,GAAG,KAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;YAClC,IAAM,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC,KAAI,CAAC,EAAE,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAI,CAAC,EAAE,CAAC,oBAAoB,CAAC;YACzF,6BACG,KAAI,CAAC,KAAK,IAAG,OAAO,CAAC,KAAI,CAAC,KAAK,CAAC,OAC9B,EAAE,EACL;QACJ,CAAC,CAAC;QAEF,IAAI,GAAG,EAAE;YACP,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,UAAC,EAAE,IAAK,OAAA,WAAW,CAAC,KAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,EAAjC,CAAiC,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;SACvF;aAAM;YACL,UAAU,GAAG,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;SAChC;QAED,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;IAC1D,CAAC;IAEO,uCAAiB,GAAzB;QACE,OAAO,IAAI,CAAC,UAAU,EAAE,IAAI,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,oBAAoB,CAAC,KAAK,KAAK,CAAC;IAClF,CAAC;IAEO,oCAAc,GAAtB,UAAuB,GAAa;QAClC,IAAI,IAAI,CAAC,UAAU,EAAE,EAAE;YACrB,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;SACrB;IACH,CAAC;IAEO,gCAAU,GAAlB;QACE,OAAO,IAAI,CAAC,EAAE,YAAY,aAAa,CAAC;IAC1C,CAAC;;IA3YD;QADC,WAAW,EAAE;;;;6CA2Bb;IA2PD;QADC,WAAW,EAAE;;6DACyB,CAAC,oBAAD,CAAC;;mDAQvC;IA+GH,kBAAC;CAAA,AAjmBD,CAAoH,KAAK,GAimBxH;SAjmBY,WAAW;AAmmBxB,YAAY;AACZ;IAA8D,iCAAoB;IAGhF,uBAAY,YAAiB,EAAE,WAA6C;QAAhE,6BAAA,EAAA,iBAAiB;QAAE,4BAAA,EAAA,gBAA6C;eAC1E,kBAAM,YAAY,EAAE,WAAW,CAAC;IAClC,CAAC;IAED;;;;;;;;;;;;;OAaG;IACH,6CAAqB,GAArB,UAAoD,QAA4C;QAC9F,IAAI,CAAC,oBAAoB,GAAG,QAAQ,CAAC;IACvC,CAAC;IACH,oBAAC;AAAD,CAAC,AAxBD,CAA8D,WAAW,GAwBxE","sourcesContent":["import { Subject } from 'rxjs';\nimport { logAction, setAction } from './actions';\nimport { addEntities, AddEntitiesOptions } from './addEntities';\nimport { coerceArray } from './coerceArray';\nimport { DEFAULT_ID_KEY } from './defaultIDKey';\nimport { EntityAction, EntityActions } from './entityActions';\nimport { isDev } from './env';\nimport { getActiveEntities, SetActiveOptions } from './getActiveEntities';\nimport { getInitialEntitiesState } from './getInitialEntitiesState';\nimport { hasEntity } from './hasEntity';\nimport { isDefined } from './isDefined';\nimport { isEmpty } from './isEmpty';\nimport { isFunction } from './isFunction';\nimport { isNil } from './isNil';\nimport { isUndefined } from './isUndefined';\nimport { removeEntities } from './removeEntities';\nimport { SetEntities, setEntities } from './setEntities';\nimport { Store } from './store';\nimport { StoreConfigOptions } from './storeConfig';\nimport { transaction } from './transaction';\nimport {\n  Constructor,\n  CreateStateCallback,\n  EntityState,\n  EntityUICreateFn,\n  getEntityType,\n  getIDType,\n  IDS,\n  OrArray,\n  StateWithActive,\n  UpdateEntityPredicate,\n  UpdateStateCallback,\n  UpsertStateCallback,\n} from './types';\nimport { updateEntities } from './updateEntities';\n\n/**\n *\n * Store for managing a collection of entities\n *\n * @example\n *\n * export interface WidgetsState extends EntityState<Widget> { }\n *\n * @StoreConfig({ name: 'widgets' })\n *  export class WidgetsStore extends EntityStore<WidgetsState> {\n *   constructor() {\n *     super();\n *   }\n * }\n *\n *\n */\nexport class EntityStore<S extends EntityState = any, EntityType = getEntityType<S>, IDType = getIDType<S>> extends Store<S> {\n  ui: EntityUIStore<any, EntityType>;\n  private entityActions = new Subject<EntityAction<IDType>>();\n  private entityIdChanges = new Subject<{ newId: IDType; oldId: IDType; pending: boolean }>();\n\n  constructor(initialState: Partial<S> = {}, protected options: Partial<StoreConfigOptions> = {}) {\n    super({ ...getInitialEntitiesState(), ...initialState }, options);\n  }\n\n  // @internal\n  get selectEntityAction$() {\n    return this.entityActions.asObservable();\n  }\n\n  // @internal\n  get selectEntityIdChanges$() {\n    return this.entityIdChanges.asObservable();\n  }\n\n  // @internal\n  get idKey() {\n    return (this.config as StoreConfigOptions).idKey || this.options.idKey || DEFAULT_ID_KEY;\n  }\n\n  /**\n   *\n   * Replace current collection with provided collection\n   *\n   * @example\n   *\n   * this.store.set([Entity, Entity])\n   * this.store.set({ids: [], entities: {}})\n   * this.store.set({ 1: {}, 2: {}})\n   *\n   */\n  set(entities: SetEntities<EntityType>, options: { activeId?: IDType | null } = {}) {\n    if (isNil(entities)) return;\n\n    isDev() && setAction('Set Entity');\n\n    const isNativePreAdd = this.akitaPreAddEntity === EntityStore.prototype.akitaPreAddEntity;\n    this.setHasCache(true, { restartTTL: true });\n\n    this._setState((state) => {\n      const newState = setEntities({\n        state,\n        entities,\n        idKey: this.idKey,\n        preAddEntity: this.akitaPreAddEntity,\n        isNativePreAdd,\n      });\n\n      if (isUndefined(options.activeId) === false) {\n        (newState as any).active = options.activeId;\n      }\n\n      return newState;\n    });\n\n    if (this.hasInitialUIState()) {\n      this.handleUICreation();\n    }\n\n    this.entityActions.next({ type: EntityActions.Set, ids: this.ids });\n  }\n\n  /**\n   * Add entities\n   *\n   * @example\n   *\n   * this.store.add([Entity, Entity])\n   * this.store.add(Entity)\n   * this.store.add(Entity, { prepend: true })\n   *\n   * this.store.add(Entity, { loading: false })\n   */\n  add(entities: OrArray<EntityType>, options: AddEntitiesOptions = { loading: false }) {\n    const collection = coerceArray(entities);\n\n    if (isEmpty(collection)) return;\n\n    const data = addEntities({\n      state: this._value(),\n      preAddEntity: this.akitaPreAddEntity,\n      entities: collection,\n      idKey: this.idKey,\n      options,\n    });\n\n    if (data) {\n      isDev() && setAction('Add Entity');\n      data.newState.loading = options.loading;\n\n      this._setState(() => data.newState);\n\n      if (this.hasInitialUIState()) {\n        this.handleUICreation(true);\n      }\n\n      this.entityActions.next({ type: EntityActions.Add, ids: data.newIds });\n    }\n  }\n\n  /**\n   *\n   * Update entities\n   *\n   * @example\n   *\n   * store.update(1, entity => ...)\n   * store.update([1, 2, 3], entity => ...)\n   * store.update(null, entity => ...)\n   */\n  update(id: OrArray<IDType> | null, newStateFn: UpdateStateCallback<EntityType>);\n  /**\n   * store.update(1, { name: newName })\n   */\n  update(id: OrArray<IDType> | null, newState: Partial<EntityType>);\n  /**\n   * store.update(entity => entity.price > 3, entity => ({ name: newName }))\n   */\n  update(predicate: UpdateEntityPredicate<EntityType>, newStateFn: UpdateStateCallback<EntityType>);\n  /**\n   * store.update(entity => entity.price > 3, { name: newName })\n   */\n  update(predicate: UpdateEntityPredicate<EntityType>, newState: Partial<EntityType>);\n  /** Support non-entity updates */\n  update(newState: UpdateStateCallback<S>);\n  update(newState: Partial<S>);\n  update(\n    idsOrFnOrState: OrArray<IDType> | null | Partial<S> | UpdateStateCallback<S> | UpdateEntityPredicate<EntityType>,\n    newStateOrFn?: UpdateStateCallback<EntityType> | Partial<EntityType> | Partial<S>\n  ) {\n    if (isUndefined(newStateOrFn)) {\n      super.update(idsOrFnOrState as Partial<S>);\n      return;\n    }\n    let ids: IDType[] = [];\n\n    if (isFunction(idsOrFnOrState)) {\n      // We need to filter according the predicate function\n      ids = this.ids.filter((id) => (idsOrFnOrState as UpdateEntityPredicate<EntityType>)(this.entities[id]));\n    } else {\n      // If it's nil we want all of them\n      ids = isNil(idsOrFnOrState) ? this.ids : coerceArray(idsOrFnOrState as OrArray<IDType>);\n    }\n\n    if (isEmpty(ids)) return;\n\n    isDev() && setAction('Update Entity', ids);\n\n    let entityIdChanged:\n      | undefined\n      | {\n          newId: IDType;\n          oldId: IDType;\n        };\n\n    this._setState((state) =>\n      updateEntities({\n        idKey: this.idKey,\n        ids,\n        preUpdateEntity: this.akitaPreUpdateEntity,\n        state,\n        newStateOrFn,\n        producerFn: this._producerFn,\n        onEntityIdChanges: (oldId: IDType, newId: IDType) => {\n          entityIdChanged = { oldId, newId };\n          this.entityIdChanges.next({ ...entityIdChanged, pending: true });\n        },\n      })\n    );\n\n    if (entityIdChanged) {\n      this.entityIdChanges.next({ ...entityIdChanged, pending: false });\n    }\n\n    this.entityActions.next({ type: EntityActions.Update, ids });\n  }\n\n  /**\n   *\n   * Create or update.\n   *\n   * Warning: By omitting the initializing callback parameter onCreate(), the type safety of entities cannot be guaranteed.\n   *\n   * @example\n   *\n   * store.upsert(1, { active: true });\n   * store.upsert([2, 3], { active: true });\n   * store.upsert([2, 3], entity => ({ isOpen: !(entity?.isOpen ?? true) }))\n   *\n   */\n  upsert<NewEntityType extends Partial<EntityType>>(ids: OrArray<IDType>, newState: UpsertStateCallback<EntityType, NewEntityType> | NewEntityType, options?: { baseClass?: Constructor }): void;\n  /**\n   *\n   * Create or update\n   *\n   * @example\n   *\n   * store.upsert(1, { active: true }, (id, newState) => ({ id, ...newState, enabled: true }));\n   * store.upsert([2, 3], { active: true }, (id, newState) => ({ id, ...newState, enabled: true }));\n   * store.upsert([2, 3], entity => ({ isOpen: !(entity?.isOpen ?? true) }), (id, newState) => ({ id, ...newState, enabled: true }));\n   *\n   */\n  upsert<NewEntityType extends Partial<EntityType>>(\n    ids: OrArray<IDType>,\n    newState: UpsertStateCallback<EntityType, NewEntityType> | NewEntityType,\n    onCreate: CreateStateCallback<EntityType, NewEntityType, IDType>,\n    options?: { baseClass?: Constructor }\n  ): void;\n  @transaction()\n  upsert<NewEntityType extends Partial<EntityType>>(\n    ids: OrArray<IDType>,\n    newState: UpsertStateCallback<EntityType, NewEntityType> | NewEntityType,\n    onCreate?: CreateStateCallback<EntityType, NewEntityType, IDType> | { baseClass?: Constructor },\n    options: { baseClass?: Constructor } = {}\n  ) {\n    const toArray = coerceArray(ids);\n    const predicate = (isUpdate) => (id) => hasEntity(this.entities, id) === isUpdate;\n    const baseClass = isFunction(onCreate) ? options.baseClass : onCreate ? onCreate.baseClass : undefined;\n    const isClassBased = isFunction(baseClass);\n\n    const updateIds = toArray.filter(predicate(true));\n    const newEntities = toArray.filter(predicate(false)).map((id) => {\n      const newStateObj = typeof newState === 'function' ? newState({}) : newState;\n      const entity = isFunction(onCreate) ? onCreate(id, newStateObj) : newStateObj;\n      const withId = { ...entity, [this.idKey]: id };\n      if (isClassBased) {\n        return new baseClass(withId);\n      }\n      return withId;\n    });\n\n    // it can be any of the three types\n    this.update(updateIds, newState as UpdateStateCallback<EntityType, NewEntityType>);\n    this.add(newEntities);\n    isDev() && logAction('Upsert Entity');\n  }\n\n  /**\n   *\n   * Upsert entity collection (idKey must be present)\n   *\n   * @example\n   *\n   * store.upsertMany([ { id: 1 }, { id: 2 }]);\n   *\n   * store.upsertMany([ { id: 1 }, { id: 2 }], { loading: true  });\n   * store.upsertMany([ { id: 1 }, { id: 2 }], { baseClass: Todo  });\n   *\n   */\n  upsertMany(entities: EntityType[], options: { baseClass?: Constructor; loading?: boolean } = {}) {\n    const addedIds = [];\n    const updatedIds = [];\n    const updatedEntities = {};\n\n    // Update the state directly to optimize performance\n    for (const entity of entities) {\n      const withPreCheckHook = this.akitaPreCheckEntity(entity);\n      const id = withPreCheckHook[this.idKey];\n      if (hasEntity(this.entities, id)) {\n        const prev = this._value().entities[id];\n        const merged = { ...this._value().entities[id], ...withPreCheckHook };\n        const next = options.baseClass ? new options.baseClass(merged) : merged;\n        const withHook = this.akitaPreUpdateEntity(prev, next);\n        const nextId = withHook[this.idKey];\n        updatedEntities[nextId] = withHook;\n        updatedIds.push(nextId);\n      } else {\n        const newEntity = options.baseClass ? new options.baseClass(withPreCheckHook) : withPreCheckHook;\n        const withHook = this.akitaPreAddEntity(newEntity);\n        const nextId = withHook[this.idKey];\n        addedIds.push(nextId);\n        updatedEntities[nextId] = withHook;\n      }\n    }\n\n    isDev() && logAction('Upsert Many');\n\n    this._setState((state) => ({\n      ...state,\n      ids: addedIds.length ? [...state.ids, ...addedIds] : state.ids,\n      entities: {\n        ...state.entities,\n        ...updatedEntities,\n      },\n      loading: !!options.loading,\n    }));\n\n    updatedIds.length && this.entityActions.next({ type: EntityActions.Update, ids: updatedIds });\n    addedIds.length && this.entityActions.next({ type: EntityActions.Add, ids: addedIds });\n    if (addedIds.length && this.hasUIStore()) {\n      this.handleUICreation(true);\n    }\n  }\n\n  /**\n   *\n   * Replace one or more entities (except the id property)\n   *\n   *\n   * @example\n   *\n   * this.store.replace(5, newEntity)\n   * this.store.replace([1,2,3], newEntity)\n   */\n  replace(ids: IDS, newState: Partial<EntityType>) {\n    const toArray = coerceArray(ids);\n    if (isEmpty(toArray)) return;\n    const replaced = {};\n    for (const id of toArray) {\n      replaced[id] = { ...newState, [this.idKey]: id };\n    }\n    isDev() && setAction('Replace Entity', ids);\n    this._setState((state) => ({\n      ...state,\n      entities: {\n        ...state.entities,\n        ...replaced,\n      },\n    }));\n  }\n\n  /**\n   *\n   * Move entity inside the collection\n   *\n   *\n   * @example\n   *\n   * this.store.move(fromIndex, toIndex)\n   */\n  move(from: number, to: number) {\n    const ids = this.ids.slice();\n    ids.splice(to < 0 ? ids.length + to : to, 0, ids.splice(from, 1)[0]);\n\n    isDev() && setAction('Move Entity');\n    this._setState((state) => ({\n      ...state,\n      // Change the entities reference so that selectAll emit\n      entities: {\n        ...state.entities,\n      },\n      ids,\n    }));\n  }\n\n  /**\n   *\n   * Remove one or more entities\n   *\n   * @example\n   *\n   * this.store.remove(5)\n   * this.store.remove([1,2,3])\n   * this.store.remove()\n   */\n  remove(id?: OrArray<IDType>);\n  /**\n   * this.store.remove(entity => entity.id === 1)\n   */\n  remove(predicate: (entity: Readonly<EntityType>) => boolean);\n  remove(idsOrFn?: OrArray<IDType> | ((entity: Readonly<EntityType>) => boolean)) {\n    if (isEmpty(this.ids)) return;\n\n    const idPassed = isDefined(idsOrFn);\n\n    // null means remove all\n    let ids: IDType[] | null = [];\n\n    if (isFunction(idsOrFn)) {\n      ids = this.ids.filter((entityId) => idsOrFn(this.entities[entityId]));\n    } else {\n      ids = idPassed ? coerceArray(idsOrFn) : this.ids;\n    }\n\n    if (isEmpty(ids)) return;\n\n    isDev() && setAction('Remove Entity', ids);\n    this._setState((state: StateWithActive<S>) => removeEntities({ state, ids }));\n\n    if (!idPassed) {\n      this.setHasCache(false);\n    }\n\n    this.handleUIRemove(ids);\n    this.entityActions.next({ type: EntityActions.Remove, ids });\n  }\n\n  /**\n   *\n   * Update the active entity\n   *\n   * @example\n   *\n   * this.store.updateActive({ completed: true })\n   * this.store.updateActive(active => {\n   *   return {\n   *     config: {\n   *      ..active.config,\n   *      date\n   *     }\n   *   }\n   * })\n   */\n  updateActive(newStateOrCallback: UpdateStateCallback<EntityType> | Partial<EntityType>) {\n    const ids = coerceArray(this.active);\n    isDev() && setAction('Update Active', ids);\n    this.update(ids, newStateOrCallback as Partial<EntityType>);\n  }\n\n  /**\n   * Set the given entity as active\n   *\n   * @example\n   *\n   * store.setActive(1)\n   * store.setActive([1, 2, 3])\n   */\n  setActive(idOrOptions: S['active'] extends any[] ? S['active'] : SetActiveOptions | S['active']);\n  setActive(idOrOptions: IDType | SetActiveOptions | null) {\n    const active = getActiveEntities(idOrOptions, this.ids, this.active);\n\n    if (active === undefined) {\n      return;\n    }\n\n    isDev() && setAction('Set Active', active);\n    this._setActive(active);\n  }\n\n  /**\n   * Add active entities\n   *\n   * @example\n   *\n   * store.addActive(2);\n   * store.addActive([3, 4, 5]);\n   */\n  addActive<T = OrArray<IDType>>(ids: T) {\n    const toArray = coerceArray(ids);\n    if (isEmpty(toArray)) return;\n    const everyExist = toArray.every((id) => this.active.indexOf(id) > -1);\n    if (everyExist) return;\n\n    isDev() && setAction('Add Active', ids);\n    this._setState((state) => {\n      /** Protect against case that one of the items in the array exist */\n      const uniques = Array.from(new Set([...(state.active as IDType[]), ...toArray]));\n      return {\n        ...state,\n        active: uniques,\n      };\n    });\n  }\n\n  /**\n   * Remove active entities\n   *\n   * @example\n   *\n   * store.removeActive(2)\n   * store.removeActive([3, 4, 5])\n   */\n  removeActive<T = OrArray<IDType>>(ids: T) {\n    const toArray = coerceArray(ids);\n    if (isEmpty(toArray)) return;\n    const someExist = toArray.some((id) => this.active.indexOf(id) > -1);\n    if (!someExist) return;\n\n    isDev() && setAction('Remove Active', ids);\n    this._setState((state) => {\n      return {\n        ...state,\n        active: Array.isArray(state.active) ? state.active.filter((currentId) => toArray.indexOf(currentId) === -1) : null,\n      };\n    });\n  }\n\n  /**\n   * Toggle active entities\n   *\n   * @example\n   *\n   * store.toggle(2)\n   * store.toggle([3, 4, 5])\n   */\n  @transaction()\n  toggleActive<T = OrArray<IDType>>(ids: T) {\n    const toArray = coerceArray(ids);\n    const filterExists = (remove) => (id) => this.active.includes(id) === remove;\n    const remove = toArray.filter(filterExists(true));\n    const add = toArray.filter(filterExists(false));\n    this.removeActive(remove);\n    this.addActive(add);\n    isDev() && logAction('Toggle Active');\n  }\n\n  /**\n   *\n   * Create sub UI store for managing Entity's UI state\n   *\n   * @example\n   *\n   * export type ProductUI = {\n   *   isLoading: boolean;\n   *   isOpen: boolean\n   * }\n   *\n   * interface ProductsUIState extends EntityState<ProductUI> {}\n   *\n   * export class ProductsStore EntityStore<ProductsState, Product> {\n   *   ui: EntityUIStore<ProductsUIState, ProductUI>;\n   *\n   *   constructor() {\n   *     super();\n   *     this.createUIStore();\n   *   }\n   *\n   * }\n   */\n  createUIStore(initialState = {}, storeConfig: Partial<StoreConfigOptions> = {}) {\n    const defaults: Partial<StoreConfigOptions> = { name: `UI/${this.storeName}`, idKey: this.idKey };\n    this.ui = new EntityUIStore(initialState, { ...defaults, ...storeConfig });\n    return this.ui;\n  }\n\n  // @internal\n  destroy() {\n    super.destroy();\n    if (this.ui instanceof EntityStore) {\n      this.ui.destroy();\n    }\n    this.entityActions.complete();\n  }\n\n  // @internal\n  akitaPreUpdateEntity(_: Readonly<EntityType>, nextEntity: any): EntityType {\n    return nextEntity as EntityType;\n  }\n\n  // @internal\n  akitaPreAddEntity(newEntity: any): EntityType {\n    return newEntity as EntityType;\n  }\n\n  // @internal\n  akitaPreCheckEntity(newEntity: Readonly<EntityType>): EntityType {\n    return newEntity;\n  }\n\n  private get ids() {\n    return this._value().ids;\n  }\n\n  private get entities() {\n    return this._value().entities;\n  }\n\n  private get active() {\n    return this._value().active;\n  }\n\n  private _setActive(ids: OrArray<IDType>) {\n    this._setState((state) => {\n      return {\n        ...state,\n        active: ids,\n      };\n    });\n  }\n\n  private handleUICreation(add = false) {\n    const ids = this.ids;\n    const isFunc = isFunction(this.ui._akitaCreateEntityFn);\n    let uiEntities;\n    const createFn = (id) => {\n      const current = this.entities[id];\n      const ui = isFunc ? this.ui._akitaCreateEntityFn(current) : this.ui._akitaCreateEntityFn;\n      return {\n        [this.idKey]: current[this.idKey],\n        ...ui,\n      };\n    };\n\n    if (add) {\n      uiEntities = this.ids.filter((id) => isUndefined(this.ui.entities[id])).map(createFn);\n    } else {\n      uiEntities = ids.map(createFn);\n    }\n\n    add ? this.ui.add(uiEntities) : this.ui.set(uiEntities);\n  }\n\n  private hasInitialUIState() {\n    return this.hasUIStore() && isUndefined(this.ui._akitaCreateEntityFn) === false;\n  }\n\n  private handleUIRemove(ids: IDType[]) {\n    if (this.hasUIStore()) {\n      this.ui.remove(ids);\n    }\n  }\n\n  private hasUIStore() {\n    return this.ui instanceof EntityUIStore;\n  }\n}\n\n// @internal\nexport class EntityUIStore<UIState, DEPRECATED = any> extends EntityStore<UIState> {\n  _akitaCreateEntityFn: EntityUICreateFn;\n\n  constructor(initialState = {}, storeConfig: Partial<StoreConfigOptions> = {}) {\n    super(initialState, storeConfig);\n  }\n\n  /**\n   *\n   * Set the initial UI entity state. This function will determine the entity's\n   * initial state when we call `set()` or `add()`.\n   *\n   * @example\n   *\n   * constructor() {\n   *   super();\n   *   this.createUIStore().setInitialEntityState(entity => ({ isLoading: false, isOpen: true }));\n   *   this.createUIStore().setInitialEntityState({ isLoading: false, isOpen: true });\n   * }\n   *\n   */\n  setInitialEntityState<EntityUI = any, Entity = any>(createFn: EntityUICreateFn<EntityUI, Entity>) {\n    this._akitaCreateEntityFn = createFn;\n  }\n}\n"]}