{"version":3,"file":"transaction.js","sourceRoot":"ng://@datorama/akita/","sources":["lib/transaction.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,eAAe,EAAc,EAAE,EAAE,OAAO,EAAE,MAAM,MAAM,CAAC;AAChE,OAAO,EAAE,SAAS,EAAE,MAAM,WAAW,CAAC;AACtC,OAAO,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AAErC,YAAY;AACZ,IAAM,mBAAmB,GAAG,IAAI,OAAO,EAAE,CAAC;AAE1C,YAAY;AACZ,IAAM,oBAAoB,GAAG,IAAI,eAAe,CAAC,KAAK,CAAC,CAAC;AAOxD,YAAY;AACZ,MAAM,CAAC,IAAM,kBAAkB,GAAuB;IACpD,kBAAkB,EAAE,CAAC;IACrB,gBAAgB,EAAE,IAAI;CACvB,CAAC;AAEF,YAAY;AACZ,MAAM,UAAU,UAAU;IACxB,IAAI,CAAC,sBAAsB,EAAE,EAAE;QAC7B,kBAAkB,CAAC,gBAAgB,GAAG,IAAI,OAAO,EAAE,CAAC;KACrD;IACD,kBAAkB,CAAC,kBAAkB,EAAE,CAAC;IACxC,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAClC,CAAC;AAED,YAAY;AACZ,MAAM,UAAU,QAAQ;IACtB,IAAI,EAAE,kBAAkB,CAAC,kBAAkB,KAAK,CAAC,EAAE;QACjD,kBAAkB,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC/C,kBAAkB,CAAC,gBAAgB,CAAC,QAAQ,EAAE,CAAC;QAC/C,oBAAoB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACjC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KAChC;AACH,CAAC;AAED,YAAY;AACZ,MAAM,UAAU,sBAAsB;IACpC,OAAO,kBAAkB,CAAC,kBAAkB,GAAG,CAAC,CAAC;AACnD,CAAC;AAED,YAAY;AACZ,MAAM,UAAU,MAAM;IACpB,OAAO,kBAAkB,CAAC,gBAAgB,CAAC,CAAC,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;AAC7G,CAAC;AAED;;;;;;;;;;;GAWG;AACH,MAAM,UAAU,gBAAgB,CAAI,MAAe,EAAE,OAAmB;IAAnB,wBAAA,EAAA,mBAAmB;IACtE,UAAU,EAAE,CAAC;IACb,IAAI;QACF,OAAO,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;KAC9B;YAAS;QACR,SAAS,CAAC,cAAc,CAAC,CAAC;QAC1B,QAAQ,EAAE,CAAC;KACZ;AACH,CAAC;AAED;;;;;;;;;;;;;;GAcG;AACH,MAAM,UAAU,WAAW;IACzB,OAAO,UAAS,MAAW,EAAE,WAAmB,EAAE,UAA8B;QAC9E,IAAM,cAAc,GAAG,UAAU,CAAC,KAAK,CAAC;QAExC,UAAU,CAAC,KAAK,GAAG;YAAA,iBAIlB;YAJ2B,cAAO;iBAAP,UAAO,EAAP,qBAAO,EAAP,IAAO;gBAAP,yBAAO;;YACjC,OAAO,gBAAgB,CAAC;gBACtB,OAAO,cAAc,CAAC,KAAK,CAAC,KAAI,EAAE,IAAI,CAAC,CAAC;YAC1C,CAAC,EAAE,IAAI,CAAC,CAAC;QACX,CAAC,CAAC;QAEF,OAAO,UAAU,CAAC;IACpB,CAAC,CAAC;AACJ,CAAC;AAED;;;;;;;;;;;;;;GAcG;AACH,MAAM,UAAU,eAAe,CAAI,IAAwB;IACzD,OAAO,UAAS,MAAqB;QACnC,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,UAAA,KAAK,IAAI,OAAA,gBAAgB,CAAC,cAAM,OAAA,IAAI,CAAC,KAAK,CAAC,EAAX,CAAW,CAAC,EAAnC,CAAmC,CAAC,CAAC,CAAC;IACxE,CAAC,CAAC;AACJ,CAAC","sourcesContent":["import { BehaviorSubject, Observable, of, Subject } from 'rxjs';\nimport { logAction } from './actions';\nimport { tap } from 'rxjs/operators';\n\n// @internal\nconst transactionFinished = new Subject();\n\n// @internal\nconst transactionInProcess = new BehaviorSubject(false);\n\nexport type TransactionManager = {\n  activeTransactions: number;\n  batchTransaction: Subject<boolean> | null;\n};\n\n// @internal\nexport const transactionManager: TransactionManager = {\n  activeTransactions: 0,\n  batchTransaction: null\n};\n\n// @internal\nexport function startBatch() {\n  if (!isTransactionInProcess()) {\n    transactionManager.batchTransaction = new Subject();\n  }\n  transactionManager.activeTransactions++;\n  transactionInProcess.next(true);\n}\n\n// @internal\nexport function endBatch() {\n  if (--transactionManager.activeTransactions === 0) {\n    transactionManager.batchTransaction.next(true);\n    transactionManager.batchTransaction.complete();\n    transactionInProcess.next(false);\n    transactionFinished.next(true);\n  }\n}\n\n// @internal\nexport function isTransactionInProcess() {\n  return transactionManager.activeTransactions > 0;\n}\n\n// @internal\nexport function commit(): Observable<boolean> {\n  return transactionManager.batchTransaction ? transactionManager.batchTransaction.asObservable() : of(true);\n}\n\n/**\n *  A logical transaction.\n *  Use this transaction to optimize the dispatch of all the stores.\n *  The following code will update the store, BUT  emits only once\n *\n *  @example\n *  applyTransaction(() => {\n *    this.todosStore.add(new Todo(1, title));\n *    this.todosStore.add(new Todo(2, title));\n *  });\n *\n */\nexport function applyTransaction<T>(action: () => T, thisArg = undefined): T {\n  startBatch();\n  try {\n    return action.apply(thisArg);\n  } finally {\n    logAction('@Transaction');\n    endBatch();\n  }\n}\n\n/**\n *  A logical transaction.\n *  Use this transaction to optimize the dispatch of all the stores.\n *\n *  The following code will update the store, BUT  emits only once.\n *\n *  @example\n *  @transaction\n *  addTodos() {\n *    this.todosStore.add(new Todo(1, title));\n *    this.todosStore.add(new Todo(2, title));\n *  }\n *\n *\n */\nexport function transaction() {\n  return function(target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n    const originalMethod = descriptor.value;\n\n    descriptor.value = function(...args) {\n      return applyTransaction(() => {\n        return originalMethod.apply(this, args);\n      }, this);\n    };\n\n    return descriptor;\n  };\n}\n\n/**\n *\n * RxJS custom operator that wraps the callback inside transaction\n *\n * @example\n *\n * return http.get().pipe(\n *    withTransaction(response > {\n *      store.setActive(1);\n *      store.update();\n *      store.updateEntity(1, {});\n *    })\n * )\n *\n */\nexport function withTransaction<T>(next: (value: T) => void) {\n  return function(source: Observable<T>): Observable<T> {\n    return source.pipe(tap(value => applyTransaction(() => next(value))));\n  };\n}\n"]}