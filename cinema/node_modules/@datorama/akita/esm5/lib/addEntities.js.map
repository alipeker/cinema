{"version":3,"file":"addEntities.js","sourceRoot":"ng://@datorama/akita/","sources":["lib/addEntities.ts"],"names":[],"mappings":";AACA,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AAYxC,YAAY;AACZ,MAAM,UAAU,WAAW,CAA8B,EAA+E;;QAA7E,KAAK,WAAA,EAAE,QAAQ,cAAA,EAAE,KAAK,WAAA,EAAE,eAAY,EAAZ,OAAO,mBAAG,EAAE,KAAA,EAAE,YAAY,kBAAA;IAC3G,IAAI,WAAW,GAAG,EAAE,CAAC;IACrB,IAAI,MAAM,GAAG,EAAE,CAAC;IAChB,IAAI,cAAc,GAAG,KAAK,CAAC;;QAE3B,KAAqB,IAAA,aAAA,SAAA,QAAQ,CAAA,kCAAA,wDAAE;YAA1B,IAAM,MAAM,qBAAA;YACf,IAAI,SAAS,CAAC,KAAK,CAAC,QAAQ,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,KAAK,KAAK,EAAE;gBACtD,uDAAuD;gBACvD,IAAM,OAAO,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC;gBACrC,IAAM,QAAQ,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;gBAChC,WAAW,CAAC,QAAQ,CAAC,GAAG,OAAO,CAAC;gBAChC,IAAI,OAAO,CAAC,OAAO;oBAAE,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;;oBACzC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBAE3B,cAAc,GAAG,IAAI,CAAC;aACvB;SACF;;;;;;;;;IAED,OAAO,cAAc;QACnB,CAAC,CAAC;YACE,QAAQ,wBACH,KAAK,KACR,QAAQ,wBACH,KAAK,CAAC,QAAQ,GACd,WAAW,GAEhB,GAAG,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC,UAAK,MAAM,EAAK,KAAK,CAAC,GAAG,EAAE,CAAC,UAAK,KAAK,CAAC,GAAG,EAAK,MAAM,CAAC,GAC7E;YACD,MAAM,QAAA;SACP;QACH,CAAC,CAAC,IAAI,CAAC;AACX,CAAC","sourcesContent":["import { EntityState, PreAddEntity } from './types';\nimport { hasEntity } from './hasEntity';\n\nexport type AddEntitiesParams<State, Entity> = {\n  state: State;\n  entities: Entity[];\n  idKey: string;\n  options: AddEntitiesOptions;\n  preAddEntity: PreAddEntity<Entity>;\n};\n\nexport type AddEntitiesOptions = { prepend?: boolean; loading?: boolean };\n\n// @internal\nexport function addEntities<S extends EntityState<E>, E>({ state, entities, idKey, options = {}, preAddEntity }: AddEntitiesParams<S, E>) {\n  let newEntities = {};\n  let newIds = [];\n  let hasNewEntities = false;\n\n  for (const entity of entities) {\n    if (hasEntity(state.entities, entity[idKey]) === false) {\n      // evaluate the middleware first to support dynamic ids\n      const current = preAddEntity(entity);\n      const entityId = current[idKey];\n      newEntities[entityId] = current;\n      if (options.prepend) newIds.unshift(entityId);\n      else newIds.push(entityId);\n\n      hasNewEntities = true;\n    }\n  }\n\n  return hasNewEntities\n    ? {\n        newState: {\n          ...state,\n          entities: {\n            ...state.entities,\n            ...newEntities\n          },\n          ids: options.prepend ? [...newIds, ...state.ids] : [...state.ids, ...newIds]\n        },\n        newIds\n      }\n    : null;\n}\n"]}