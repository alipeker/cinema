{"version":3,"file":"actions.js","sourceRoot":"ng://@datorama/akita/","sources":["lib/actions.ts"],"names":[],"mappings":"AASA,MAAM,CAAC,IAAM,aAAa,GAAwB;IAChD,IAAI,EAAE,IAAI;IACV,SAAS,EAAE,IAAI;IACf,IAAI,EAAE,KAAK;IACX,OAAO,EAAE,IAAI;CACd,CAAC;AAEF,IAAI,kBAAkB,GAAG,KAAK,CAAC;AAE/B,MAAM,UAAU,iBAAiB;IAC/B,kBAAkB,GAAG,KAAK,CAAC;AAC7B,CAAC;AAED,2DAA2D;AAC3D,MAAM,UAAU,SAAS,CAAC,IAAY,EAAE,SAAU,EAAE,OAAa;IAC/D,SAAS,CAAC,IAAI,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;IACpC,kBAAkB,GAAG,IAAI,CAAC;AAC5B,CAAC;AAED,MAAM,UAAU,SAAS,CAAC,IAAY,EAAE,SAAU,EAAE,OAAa;IAC/D,IAAI,kBAAkB,KAAK,KAAK,EAAE;QAChC,aAAa,CAAC,IAAI,GAAG,IAAI,CAAC;QAC1B,aAAa,CAAC,SAAS,GAAG,SAAS,CAAC;QACpC,aAAa,CAAC,OAAO,GAAG,OAAO,CAAA;KAChC;AACH,CAAC;AAED,MAAM,UAAU,aAAa,CAAC,IAAW;IAAX,qBAAA,EAAA,WAAW;IACvC,aAAa,CAAC,IAAI,GAAG,IAAI,CAAC;AAC5B,CAAC;AAED,MAAM,UAAU,MAAM,CAAC,MAAc,EAAE,SAAU;IAC/C,OAAO,UAAU,MAAW,EAAE,WAAmB,EAAE,UAA8B;QAC/E,IAAM,cAAc,GAAG,UAAU,CAAC,KAAK,CAAC;QACxC,UAAU,CAAC,KAAK,GAAG;YAAU,cAAO;iBAAP,UAAO,EAAP,qBAAO,EAAP,IAAO;gBAAP,yBAAO;;YAClC,SAAS,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;YAC7B,OAAO,cAAc,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAC1C,CAAC,CAAC;QAEF,OAAO,UAAU,CAAC;IACpB,CAAC,CAAC;AACJ,CAAC","sourcesContent":["import { IDS } from './types';\n\nexport interface StoreSnapshotAction {\n  type: string | null;\n  entityIds: IDS[] | null;\n  skip: boolean;\n  payload: any\n}\n\nexport const currentAction: StoreSnapshotAction = {\n  type: null,\n  entityIds: null,\n  skip: false,\n  payload: null\n};\n\nlet customActionActive = false;\n\nexport function resetCustomAction() {\n  customActionActive = false;\n}\n\n// public API for custom actions. Custom action always wins\nexport function logAction(type: string, entityIds?, payload?: any) {\n  setAction(type, entityIds, payload);\n  customActionActive = true;\n}\n\nexport function setAction(type: string, entityIds?, payload?: any) {\n  if (customActionActive === false) {\n    currentAction.type = type;\n    currentAction.entityIds = entityIds;\n    currentAction.payload = payload\n  }\n}\n\nexport function setSkipAction(skip = true) {\n  currentAction.skip = skip;\n}\n\nexport function action(action: string, entityIds?) {\n  return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n    const originalMethod = descriptor.value;\n    descriptor.value = function (...args) {\n      logAction(action, entityIds);\n      return originalMethod.apply(this, args);\n    };\n\n    return descriptor;\n  };\n}\n"]}