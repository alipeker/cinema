{"version":3,"file":"cacheable.js","sourceRoot":"ng://@datorama/akita/","sources":["lib/cacheable.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAc,EAAE,EAAE,MAAM,MAAM,CAAC;AAG7C;;;;;;;;;;;;;;;GAeG;AACH,MAAM,UAAU,SAAS,CAAI,KAAY,EAAE,QAAuB,EAAE,UAAiC,EAAE,QAAQ,EAAE,KAAK,EAAE;IACtH,IAAI,KAAK,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE;QACxB,OAAO,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;KACjD;IACD,OAAO,QAAQ,CAAC;AAClB,CAAC","sourcesContent":["import { EMPTY, Observable, of } from 'rxjs';\nimport { Store } from './store';\n\n/**\n * \n * Helper function for checking if we have data in cache\n * \n * export class ProductsService {\n *   constructor(private productsStore: ProductsStore) {}\n\n *   get(): Observable<void> {\n *     const request = this.http.get().pipe(\n *       tap(this.productsStore.set(response))\n *     );\n *\n *     return cacheable(this.productsStore, request);\n *   }\n * }\n */\nexport function cacheable<T>(store: Store, request$: Observable<T>, options: { emitNext: boolean } = { emitNext: false }): Observable<T | undefined | never> {\n  if (store._cache().value) {\n    return options.emitNext ? of(undefined) : EMPTY;\n  }\n  return request$;\n}\n"]}