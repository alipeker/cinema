{"version":3,"file":"persistState.js","sourceRoot":"ng://@datorama/akita/","sources":["lib/persistState.ts"],"names":[],"mappings":"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","sourcesContent":["import { from, isObservable, of, OperatorFunction, ReplaySubject, Subscription } from 'rxjs';\nimport { filter, map, skip } from 'rxjs/operators';\nimport { setAction } from './actions';\nimport { $$addStore, $$deleteStore } from './dispatchers';\nimport { getValue } from './getValueByString';\nimport { isFunction } from './isFunction';\nimport { isNil } from './isNil';\nimport { isObject } from './isObject';\nimport { hasLocalStorage, hasSessionStorage, isNotBrowser } from './root';\nimport { setValue } from './setValueByString';\nimport { __stores__ } from './stores';\nimport { HashMap, MaybeAsync } from './types';\n\nlet skipStorageUpdate = false;\n\nconst _persistStateInit = new ReplaySubject(1);\n\nexport function selectPersistStateInit() {\n  return _persistStateInit.asObservable();\n}\n\nexport function setSkipStorageUpdate(skip: boolean) {\n  skipStorageUpdate = skip;\n}\n\nexport function getSkipStorageUpdate() {\n  return skipStorageUpdate;\n}\n\nexport interface PersistStateStorage {\n  getItem(key: string): MaybeAsync;\n\n  setItem(key: string, value: any): MaybeAsync;\n\n  clear(): void;\n}\n\nfunction isPromise(v: any) {\n  return v && isFunction(v.then);\n}\n\nfunction observify(asyncOrValue: any) {\n  if (isPromise(asyncOrValue) || isObservable(asyncOrValue)) {\n    return from(asyncOrValue);\n  }\n\n  return of(asyncOrValue);\n}\n\nexport type PersistStateSelectFn<T = any> = ((store: T) => Partial<T>) & { storeName: string };\n\nexport interface PersistStateParams {\n  /** The storage key */\n  key: string;\n  /** Whether to enable persistState in a non-browser environment */\n  enableInNonBrowser: boolean;\n  /** Storage strategy to use. This defaults to LocalStorage but you can pass SessionStorage or anything that implements the StorageEngine API. */\n  storage: PersistStateStorage;\n  /** Custom deserializer. Defaults to JSON.parse */\n  deserialize: Function;\n  /** Custom serializer, defaults to JSON.stringify */\n  serialize: Function;\n  /** By default the whole state is saved to storage, use this param to include only the stores you need. */\n  include: (string | ((storeName: string) => boolean))[];\n  /** By default the whole state is saved to storage, use this param to include only the data you need. */\n  select: PersistStateSelectFn[];\n\n  preStorageUpdate(storeName: string, state: any): any;\n\n  preStoreUpdate(storeName: string, state: any, initialState: any): any;\n\n  skipStorageUpdate: () => boolean;\n  preStorageUpdateOperator: () => OperatorFunction<any, any>;\n  /** Whether to persist a dynamic store upon destroy */\n  persistOnDestroy: boolean;\n}\n\nexport interface PersistState {\n  destroy(): void;\n  /**\n   * @deprecated Use clearStore instead.\n   */\n  clear(): void;\n  clearStore(storeName?: string): void;\n}\n\nexport function persistState(params?: Partial<PersistStateParams>): PersistState {\n  const defaults: PersistStateParams = {\n    key: 'AkitaStores',\n    enableInNonBrowser: false,\n    storage: !hasLocalStorage() ? params.storage : localStorage,\n    deserialize: JSON.parse,\n    serialize: JSON.stringify,\n    include: [],\n    select: [],\n    persistOnDestroy: false,\n    preStorageUpdate: function (storeName, state) {\n      return state;\n    },\n    preStoreUpdate: function (storeName, state) {\n      return state;\n    },\n    skipStorageUpdate: getSkipStorageUpdate,\n    preStorageUpdateOperator: () => (source) => source,\n  };\n\n  const { storage, enableInNonBrowser, deserialize, serialize, include, select, key, preStorageUpdate, persistOnDestroy, preStorageUpdateOperator, preStoreUpdate, skipStorageUpdate } = Object.assign(\n    {},\n    defaults,\n    params\n  );\n\n  if ((isNotBrowser && !enableInNonBrowser) || !storage) return;\n\n  const hasInclude = include.length > 0;\n  const hasSelect = select.length > 0;\n  let includeStores: { fns: Function[]; [key: string]: Function[] | string };\n  let selectStores: { [key: string]: PersistStateSelectFn };\n\n  if (hasInclude) {\n    includeStores = include.reduce(\n      (acc, path) => {\n        if (isFunction(path)) {\n          acc.fns.push(path);\n        } else {\n          const storeName = path.split('.')[0];\n          acc[storeName] = path;\n        }\n        return acc;\n      },\n      { fns: [] }\n    );\n  }\n\n  if (hasSelect) {\n    selectStores = select.reduce((acc, selectFn) => {\n      acc[selectFn.storeName] = selectFn;\n\n      return acc;\n    }, {});\n  }\n\n  let stores: HashMap<Subscription> = {};\n  let acc = {};\n  let subscriptions: Subscription[] = [];\n\n  const buffer = [];\n\n  function _save(v: any) {\n    observify(v).subscribe(() => {\n      const next = buffer.shift();\n      next && _save(next);\n    });\n  }\n\n  // when we use the local/session storage we perform the serialize, otherwise we let the passed storage implementation to do it\n  const isLocalStorage = (hasLocalStorage() && storage === localStorage) || (hasSessionStorage() && storage === sessionStorage);\n\n  observify(storage.getItem(key)).subscribe((value: any) => {\n    let storageState = isObject(value) ? value : deserialize(value || '{}');\n\n    function save(storeCache) {\n      storageState['$cache'] = { ...(storageState['$cache'] || {}), ...storeCache };\n      storageState = Object.assign({}, storageState, acc);\n\n      buffer.push(storage.setItem(key, isLocalStorage ? serialize(storageState) : storageState));\n      _save(buffer.shift());\n    }\n\n    function subscribe(storeName, path) {\n      stores[storeName] = __stores__[storeName]\n        ._select((state) => getValue(state, path))\n        .pipe(\n          skip(1),\n          map((store) => {\n            if (hasSelect && selectStores[storeName]) {\n              return selectStores[storeName](store);\n            }\n\n            return store;\n          }),\n          filter(() => skipStorageUpdate() === false),\n          preStorageUpdateOperator()\n        )\n        .subscribe((data) => {\n          acc[storeName] = preStorageUpdate(storeName, data);\n          Promise.resolve().then(() => save({ [storeName]: __stores__[storeName]._cache().getValue() }));\n        });\n    }\n\n    function setInitial(storeName, store, path) {\n      if (storeName in storageState) {\n        setAction('@PersistState');\n        store._setState((state) => {\n          return setValue(state, path, preStoreUpdate(storeName, storageState[storeName], state));\n        });\n        const hasCache = storageState['$cache'] ? storageState['$cache'][storeName] : false;\n        __stores__[storeName].setHasCache(hasCache, { restartTTL: true });\n      }\n    }\n\n    subscriptions.push(\n      $$deleteStore.subscribe((storeName) => {\n        if (stores[storeName]) {\n          if (persistOnDestroy === false) {\n            save({ [storeName]: false });\n          }\n          stores[storeName].unsubscribe();\n          delete stores[storeName];\n        }\n      })\n    );\n\n    subscriptions.push(\n      $$addStore.subscribe((storeName) => {\n        if (storeName === 'router') {\n          return;\n        }\n\n        const store = __stores__[storeName];\n        if (hasInclude) {\n          let path = includeStores[storeName];\n\n          if (!path) {\n            const passPredicate = includeStores.fns.some((fn) => fn(storeName));\n            if (passPredicate) {\n              path = storeName;\n            } else {\n              return;\n            }\n          }\n          setInitial(storeName, store, path);\n          subscribe(storeName, path);\n        } else {\n          setInitial(storeName, store, storeName);\n          subscribe(storeName, storeName);\n        }\n      })\n    );\n\n    _persistStateInit.next();\n  });\n\n  return {\n    destroy() {\n      subscriptions.forEach((s) => s.unsubscribe());\n      for (let i = 0, keys = Object.keys(stores); i < keys.length; i++) {\n        const storeName = keys[i];\n        stores[storeName].unsubscribe();\n      }\n      stores = {};\n    },\n    clear() {\n      storage.clear();\n    },\n    clearStore(storeName?: string) {\n      if (isNil(storeName)) {\n        const value = observify(storage.setItem(key, '{}'));\n        value.subscribe();\n        return;\n      }\n      const value = storage.getItem(key);\n      observify(value).subscribe((v) => {\n        const storageState = deserialize(v || '{}');\n\n        if (storageState[storeName]) {\n          delete storageState[storeName];\n          const value = observify(storage.setItem(key, serialize(storageState)));\n          value.subscribe();\n        }\n      });\n    },\n  };\n}\n"]}