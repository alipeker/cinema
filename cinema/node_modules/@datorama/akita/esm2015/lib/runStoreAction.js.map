{"version":3,"file":"runStoreAction.js","sourceRoot":"ng://@datorama/akita/","sources":["lib/runStoreAction.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,UAAU,EAAE,MAAM,UAAU,CAAC;AACtC,OAAO,EAAE,KAAK,EAAE,MAAM,SAAS,CAAC;AAEhC,OAAO,EAAE,SAAS,EAAE,MAAM,eAAe,CAAC;AAC1C,OAAO,EAAE,UAAU,EAAE,MAAM,UAAU,CAAC;AAGtC,MAAM,CAAN,IAAY,WAEX;AAFD,WAAY,WAAW;IACrB,gCAAiB,CAAA;AACnB,CAAC,EAFW,WAAW,KAAX,WAAW,QAEtB;AAED,MAAM,kBAAkB,GAAG;IACzB,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE,QAAQ;CAC/B,CAAC;AAEF,MAAM,CAAN,IAAY,iBAQX;AARD,WAAY,iBAAiB;IAC3B,sCAAiB,CAAA;IACjB,iDAA4B,CAAA;IAC5B,iDAA4B,CAAA;IAC5B,uDAAkC,CAAA;IAClC,uDAAkC,CAAA;IAClC,uDAAkC,CAAA;IAClC,gEAA2C,CAAA;AAC7C,CAAC,EARW,iBAAiB,KAAjB,iBAAiB,QAQ5B;AAED,MAAM,wBAAwB,GAAG;IAC/B,CAAC,iBAAiB,CAAC,MAAM,CAAC,EAAE,QAAQ;IACpC,CAAC,iBAAiB,CAAC,WAAW,CAAC,EAAE,KAAK;IACtC,CAAC,iBAAiB,CAAC,WAAW,CAAC,EAAE,KAAK;IACtC,CAAC,iBAAiB,CAAC,cAAc,CAAC,EAAE,QAAQ;IAC5C,CAAC,iBAAiB,CAAC,cAAc,CAAC,EAAE,QAAQ;IAC5C,CAAC,iBAAiB,CAAC,cAAc,CAAC,EAAE,QAAQ;IAC5C,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,EAAE,YAAY;CACrD,CAAC;AAEF;;;GAGG;AACH,MAAM,UAAU,QAAQ,CAAyE,UAA+B;IAC9H,OAAO,cAAc,CAAY,UAAU,CAAC,SAAS,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;AACvE,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,cAAc,CAAyE,SAAiB;IACtH,MAAM,KAAK,GAAG,UAAU,CAAC,SAAS,CAAW,CAAC;IAE9C,IAAI,KAAK,CAAC,KAAK,CAAC,EAAE;QAChB,MAAM,IAAI,UAAU,CAAC,GAAG,KAAK,CAAC,SAAS,gBAAgB,CAAC,CAAC;KAC1D;IAED,OAAO,KAAK,CAAC;AACf,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,cAAc,CAAiG,UAAqC;IAClK,OAAO,QAAQ,CAAC,UAAmC,CAAiB,CAAC;AACvE,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,oBAAoB,CAAiG,SAAiB;IACpJ,OAAO,cAAc,CAAkB,SAAS,CAAiB,CAAC;AACpE,CAAC;AAiBD,MAAM,UAAU,cAAc,CAC5B,gBAA8C,EAC9C,MAAmB,EACnB,SAA8D;IAE9D,MAAM,KAAK,GAAG,OAAO,gBAAgB,KAAK,QAAQ,CAAC,CAAC,CAAC,cAAc,CAAY,gBAAgB,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAY,gBAAgB,CAAC,CAAC;IACzI,SAAS,CAAC,KAAK,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;AAC3D,CAAC;AA8FD,MAAM,UAAU,oBAAoB,CAClC,gBAAoD,EACpD,MAAyB,EACzB,SAA0E;IAE1E,MAAM,KAAK,GAAG,OAAO,gBAAgB,KAAK,QAAQ,CAAC,CAAC,CAAC,oBAAoB,CAAkB,gBAAgB,CAAC,CAAC,CAAC,CAAC,cAAc,CAAkB,gBAAgB,CAAC,CAAC;IACjK,SAAS,CAAC,KAAK,CAAC,wBAAwB,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;AACjE,CAAC","sourcesContent":["import { EntityStore } from './entityStore';\nimport { AkitaError } from './errors';\nimport { isNil } from './isNil';\nimport { Store } from './store';\nimport { configKey } from './storeConfig';\nimport { __stores__ } from './stores';\nimport { Constructor } from './types';\n\nexport enum StoreAction {\n  Update = 'UPDATE',\n}\n\nconst StoreActionMapping = {\n  [StoreAction.Update]: 'update',\n};\n\nexport enum EntityStoreAction {\n  Update = 'UPDATE',\n  AddEntities = 'ADD_ENTITIES',\n  SetEntities = 'SET_ENTITIES',\n  UpdateEntities = 'UPDATE_ENTITIES',\n  RemoveEntities = 'REMOVE_ENTITIES',\n  UpsertEntities = 'UPSERT_ENTITIES',\n  UpsertManyEntities = 'UPSERT_MANY_ENTITIES',\n}\n\nconst EntityStoreActionMapping = {\n  [EntityStoreAction.Update]: 'update',\n  [EntityStoreAction.AddEntities]: 'add',\n  [EntityStoreAction.SetEntities]: 'set',\n  [EntityStoreAction.UpdateEntities]: 'update',\n  [EntityStoreAction.RemoveEntities]: 'remove',\n  [EntityStoreAction.UpsertEntities]: 'upsert',\n  [EntityStoreAction.UpsertManyEntities]: 'upsertMany',\n};\n\n/**\n * Get a {@link Store} from the global store registry.\n * @param storeClass The {@link Store} class of the instance to be returned.\n */\nexport function getStore<TStore extends Store<S>, S = TStore extends Store<infer T> ? T : never>(storeClass: Constructor<TStore>): TStore {\n  return getStoreByName<TStore, S>(storeClass[configKey]['storeName']);\n}\n\n/**\n * Get a {@link Store} from the global store registry.\n * @param storeName The {@link Store} name of the instance to be returned.\n */\nexport function getStoreByName<TStore extends Store<S>, S = TStore extends Store<infer T> ? T : never>(storeName: string): TStore {\n  const store = __stores__[storeName] as TStore;\n\n  if (isNil(store)) {\n    throw new AkitaError(`${store.storeName} doesn't exist`);\n  }\n\n  return store;\n}\n\n/**\n * Get a {@link EntityStore} from the global store registry.\n * @param storeClass The {@link EntityStore} class of the instance to be returned.\n */\nexport function getEntityStore<TEntityStore extends EntityStore<S>, S = TEntityStore extends EntityStore<infer T> ? T : never>(storeClass: Constructor<TEntityStore>): TEntityStore {\n  return getStore(storeClass as Constructor<Store<S>>) as TEntityStore;\n}\n\n/**\n * Get a {@link EntityStore} from the global store registry.\n * @param storeName The {@link EntityStore} name of the instance to be returned.\n */\nexport function getEntityStoreByName<TEntityStore extends EntityStore<S>, S = TEntityStore extends EntityStore<infer T> ? T : never>(storeName: string): TEntityStore {\n  return getStoreByName<TEntityStore, S>(storeName) as TEntityStore;\n}\n\n/**\n * Run {@link StoreAction.Update} action.\n * @param storeClassOrName The {@link Store} class or name in which the action should be executed.\n * @param action The {@link StoreAction.Update} action, see {@link Store.update}.\n * @param operation The operation to execute the {@link StoreAction.Update} action.\n * @example\n *\n *  runStoreAction(BooksStore, StoreAction.Update, update => update({ filter: 'COMPLETE' }));\n *\n */\nexport function runStoreAction<TStore extends Store<S>, S = TStore extends Store<infer T> ? T : any>(\n  storeClassOrName: Constructor<TStore> | string,\n  action: StoreAction.Update,\n  operation: (operator: TStore['update']) => void\n);\nexport function runStoreAction<TStore extends Store<S>, S = TStore extends Store<infer T> ? T : any>(\n  storeClassOrName: Constructor<TStore> | string,\n  action: StoreAction,\n  operation: (operator: TStore[keyof TStore] & Function) => void\n) {\n  const store = typeof storeClassOrName === 'string' ? getStoreByName<TStore, S>(storeClassOrName) : getStore<TStore, S>(storeClassOrName);\n  operation(store[StoreActionMapping[action]].bind(store));\n}\n\n/**\n * Run {@link EntityStoreAction.SetEntities} action.\n * @param storeClassOrName The {@link EntityStore} class or name in which the action should be executed.\n * @param action The {@link EntityStoreAction.SetEntities} action, see {@link EntityStore.set}.\n * @param operation The operation to execute the {@link EntityStoreAction.SetEntities} action.\n * @example\n *\n *  runEntityStoreAction(BooksStore, EntityStoreAction.SetEntities, set => set([{ id: 1 }, { id: 2 }]));\n *\n */\nexport function runEntityStoreAction<TEntityStore extends EntityStore<S>, S = TEntityStore extends EntityStore<infer T> ? T : any>(\n  storeClassOrName: Constructor<TEntityStore> | string,\n  action: EntityStoreAction.SetEntities,\n  operation: (operator: TEntityStore['set']) => void\n);\n/**\n * Run {@link EntityStoreAction.AddEntities} action.\n * @param storeClassOrName The {@link EntityStore} class or name in which the action should be executed.\n * @param action The {@link EntityStoreAction.AddEntities} action, see {@link EntityStore.add}.\n * @param operation The operation to execute the {@link EntityStoreAction.AddEntities} action.\n * @example\n *\n *  runEntityStoreAction(BooksStore, EntityStoreAction.AddEntities, add => add({ id: 1 }));\n *\n */\nexport function runEntityStoreAction<TEntityStore extends EntityStore<S>, S = TEntityStore extends EntityStore<infer T> ? T : any>(\n  storeClassOrName: Constructor<TEntityStore> | string,\n  action: EntityStoreAction.AddEntities,\n  operation: (operator: TEntityStore['add']) => void\n);\n/**\n * Run {@link EntityStoreAction.UpdateEntities} action.\n * @param storeClassOrName The {@link EntityStore} class or name in which the action should be executed.\n * @param action The {@link EntityStoreAction.UpdateEntities} action, see {@link EntityStore.update}.\n * @param operation The operation to execute the {@link EntityStoreAction.UpdateEntities} action.\n * @example\n *\n *  runEntityStoreAction(BooksStore, EntityStoreAction.UpdateEntities, update => update(2, { title: 'New title' }));\n *\n */\nexport function runEntityStoreAction<TEntityStore extends EntityStore<S>, S = TEntityStore extends EntityStore<infer T> ? T : any>(\n  storeClassOrName: Constructor<TEntityStore> | string,\n  action: EntityStoreAction.UpdateEntities,\n  operation: (operator: TEntityStore['update']) => void\n);\n/**\n * Run {@link EntityStoreAction.RemoveEntities} action.\n * @param storeClassOrName The {@link EntityStore} class or name in which the action should be executed.\n * @param action The {@link EntityStoreAction.RemoveEntities} action, see {@link EntityStore.remove}.\n * @param operation The operation to execute the {@link EntityStoreAction.RemoveEntities} action.\n * @example\n *\n *  runEntityStoreAction(BooksStore, EntityStoreAction.RemoveEntities, remove => remove(2));\n *\n */\nexport function runEntityStoreAction<TEntityStore extends EntityStore<S>, S = TEntityStore extends EntityStore<infer T> ? T : any>(\n  storeClassOrName: Constructor<TEntityStore> | string,\n  action: EntityStoreAction.RemoveEntities,\n  operation: (operator: TEntityStore['remove']) => void\n);\n/**\n * Run {@link EntityStoreAction.UpsertEntities} action.\n * @param storeClassOrName The {@link EntityStore} class or name in which the action should be executed.\n * @param action The {@link EntityStoreAction.UpsertEntities} action, see {@link EntityStore.upsert}.\n * @param operation The operation to execute the {@link EntityStoreAction.UpsertEntities} action.\n * @example\n *\n *  runEntityStoreAction(BooksStore, EntityStoreAction.UpsertEntities, upsert => upsert([2, 3], { title: 'New Title' }, (id, newState) => ({ id, ...newState, price: 0 })));\n *\n */\nexport function runEntityStoreAction<TEntityStore extends EntityStore<S>, S = TEntityStore extends EntityStore<infer T> ? T : any>(\n  storeClassOrName: Constructor<TEntityStore> | string,\n  action: EntityStoreAction.UpsertEntities,\n  operation: (operator: TEntityStore['upsert']) => void\n);\n/**\n * Run {@link EntityStoreAction.UpsertManyEntities} action.\n * @param storeClassOrName The {@link EntityStore} class or name in which the action should be executed.\n * @param action The {@link EntityStoreAction.UpsertManyEntities} action, see {@link EntityStore.upsertMany}.\n * @param operation The operation to execute the {@link EntityStoreAction.UpsertManyEntities} action.\n * @example\n *\n *  runEntityStoreAction(BooksStore, EntityStoreAction.UpsertManyEntities, upsertMany => upsertMany([\n *    { id: 2, title: 'New title', price: 0 },\n *    { id: 4, title: 'Another title', price: 0 },\n *  ));\n */\nexport function runEntityStoreAction<TEntityStore extends EntityStore<S>, S = TEntityStore extends EntityStore<infer T> ? T : any>(\n  storeClassOrName: Constructor<TEntityStore> | string,\n  action: EntityStoreAction.UpsertManyEntities,\n  operation: (operator: TEntityStore['upsertMany']) => void\n);\nexport function runEntityStoreAction<TEntityStore extends EntityStore<S>, S = TEntityStore extends EntityStore<infer T> ? T : any>(\n  storeClassOrName: Constructor<TEntityStore> | string,\n  action: EntityStoreAction,\n  operation: (operator: TEntityStore[keyof TEntityStore] & Function) => void\n) {\n  const store = typeof storeClassOrName === 'string' ? getEntityStoreByName<TEntityStore, S>(storeClassOrName) : getEntityStore<TEntityStore, S>(storeClassOrName);\n  operation(store[EntityStoreActionMapping[action]].bind(store));\n}\n"]}