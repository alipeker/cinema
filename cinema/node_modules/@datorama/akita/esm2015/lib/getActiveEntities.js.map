{"version":3,"file":"getActiveEntities.js","sourceRoot":"ng://@datorama/akita/","sources":["lib/getActiveEntities.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,KAAK,EAAE,MAAM,SAAS,CAAC;AAChC,OAAO,EAAE,QAAQ,EAAE,MAAM,YAAY,CAAC;AACtC,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAC;AAIpC,YAAY;AACZ,MAAM,UAAU,iBAAiB,CAAC,WAA0C,EAAE,GAAS,EAAE,aAAyB;IAChH,IAAI,MAAM,CAAC;IAEX,IAAI,OAAO,CAAC,WAAW,CAAC,EAAE;QACxB,MAAM,GAAG,WAAW,CAAC;KACtB;SAAM;QACL,IAAI,QAAQ,CAAC,WAAW,CAAC,EAAE;YACzB,IAAI,KAAK,CAAC,aAAa,CAAC;gBAAE,OAAO;YAChC,WAAgC,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,WAAW,CAAC,CAAC;YAC/E,MAAM,cAAc,GAAG,GAAG,CAAC,OAAO,CAAC,aAAmB,CAAC,CAAC;YACxD,IAAK,WAAgC,CAAC,IAAI,EAAE;gBAC1C,MAAM,OAAO,GAAG,cAAc,KAAK,CAAC,CAAC;gBACrC,IAAI,OAAO,IAAI,CAAE,WAAgC,CAAC,IAAI;oBAAE,OAAO;gBAC/D,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAE,GAAG,CAAC,cAAc,GAAG,CAAC,CAAS,CAAC;aAC3E;iBAAM,IAAK,WAAgC,CAAC,IAAI,EAAE;gBACjD,MAAM,MAAM,GAAG,GAAG,CAAC,MAAM,KAAK,cAAc,GAAG,CAAC,CAAC;gBACjD,IAAI,MAAM,IAAI,CAAE,WAAgC,CAAC,IAAI;oBAAE,OAAO;gBAC9D,MAAM,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAE,GAAG,CAAC,cAAc,GAAG,CAAC,CAAS,CAAC;aAC7D;SACF;aAAM;YACL,IAAI,WAAW,KAAK,aAAa;gBAAE,OAAO;YAC1C,MAAM,GAAG,WAAiB,CAAC;SAC5B;KACF;IAED,OAAO,MAAM,CAAC;AAChB,CAAC","sourcesContent":["import { ID, IDS } from './types';\nimport { isNil } from './isNil';\nimport { isObject } from './isObject';\nimport { isArray } from './isArray';\n\nexport type SetActiveOptions = { prev?: boolean; next?: boolean; wrap?: boolean };\n\n// @internal\nexport function getActiveEntities(idOrOptions: IDS | SetActiveOptions | null, ids: ID[], currentActive: IDS | null) {\n  let result;\n\n  if (isArray(idOrOptions)) {\n    result = idOrOptions;\n  } else {\n    if (isObject(idOrOptions)) {\n      if (isNil(currentActive)) return;\n      (idOrOptions as SetActiveOptions) = Object.assign({ wrap: true }, idOrOptions);\n      const currentIdIndex = ids.indexOf(currentActive as ID);\n      if ((idOrOptions as SetActiveOptions).prev) {\n        const isFirst = currentIdIndex === 0;\n        if (isFirst && !(idOrOptions as SetActiveOptions).wrap) return;\n        result = isFirst ? ids[ids.length - 1] : (ids[currentIdIndex - 1] as any);\n      } else if ((idOrOptions as SetActiveOptions).next) {\n        const isLast = ids.length === currentIdIndex + 1;\n        if (isLast && !(idOrOptions as SetActiveOptions).wrap) return;\n        result = isLast ? ids[0] : (ids[currentIdIndex + 1] as any);\n      }\n    } else {\n      if (idOrOptions === currentActive) return;\n      result = idOrOptions as ID;\n    }\n  }\n\n  return result;\n}\n"]}