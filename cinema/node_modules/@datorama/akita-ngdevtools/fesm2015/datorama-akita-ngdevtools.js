import { InjectionToken, NgZone, Inject, ɵɵdefineInjectable, ɵɵinject, Injectable, APP_INITIALIZER, NgModule } from '@angular/core';
import { akitaDevtools } from '@datorama/akita';

const DEVTOOLS_OPTIONS = new InjectionToken('DevtoolsOptions');
class AkitaDevtools {
    constructor(ngZone, options) {
        this.ngZone = ngZone;
        this.options = options;
        akitaDevtools(this.ngZone, this.options);
    }
}
AkitaDevtools.ctorParameters = () => [
    { type: NgZone },
    { type: undefined, decorators: [{ type: Inject, args: [DEVTOOLS_OPTIONS,] }] }
];
AkitaDevtools.ɵprov = ɵɵdefineInjectable({ factory: function AkitaDevtools_Factory() { return new AkitaDevtools(ɵɵinject(NgZone), ɵɵinject(DEVTOOLS_OPTIONS)); }, token: AkitaDevtools, providedIn: "root" });
AkitaDevtools.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
AkitaDevtools.ctorParameters = () => [
    { type: NgZone },
    { type: undefined, decorators: [{ type: Inject, args: [DEVTOOLS_OPTIONS,] }] }
];
// auto initialize the devtools
function d() { }
function init(akitaDevtools) {
    return d;
}
class AkitaNgDevtools {
    static forRoot(options) {
        return {
            ngModule: AkitaNgDevtools,
            providers: [
                {
                    provide: DEVTOOLS_OPTIONS,
                    useValue: options
                },
                {
                    provide: APP_INITIALIZER,
                    useFactory: init,
                    deps: [AkitaDevtools],
                    multi: true
                }
            ]
        };
    }
}
AkitaNgDevtools.decorators = [
    { type: NgModule, args: [{},] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { AkitaDevtools, AkitaNgDevtools, DEVTOOLS_OPTIONS, d, init };
//# sourceMappingURL=datorama-akita-ngdevtools.js.map
